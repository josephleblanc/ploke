[package]
name = "syn_parser"
version = "0.1.0"
edition = "2021"
description = "A Rust code parser and analyzer using syn"
authors = ["Your Name <your.email@example.com>"]

[dependencies]
# Parsing and code generation
syn = { workspace = true }
quote = { workspace = true }
proc-macro2 = { workspace = true }

# Serialization
serde = { workspace = true }
serde_json = { workspace = true }
ron = { workspace = true }

# Concurrency and parallelism
rayon = { workspace = true }
flume = { workspace = true }
tokio = { workspace = true }
dashmap = { workspace = true }

# Data structures and algorithms
cozo = { workspace = true }
# Uuid handling
uuid = { workspace = true, features = ["v5", "serde"] }

# Error handling
thiserror = { workspace = true }                                                   # version 2
ploke-common = { path = "../../common" }
ploke-core = { path = "../../ploke-core", features = [] }
ploke-error = { path = "../../ploke-error" }
syn_parser_macros = { path = "../../../proc_macros/syn_parser/syn_parser_macros" } # Add dependency on the
anyhow = "1.0"

# Added for Phase 1 Discovery (Optional)
toml = { version = "0.8" }
walkdir = { version = "2.4" }

# cfg handling
parse_cfg = "4.1.1"
# target-lexicon = "0.13"         # Removed: Not needed until Phase 3/RAG

# debugging
log = { workspace = true }
tracing = { workspace = true }
colored = { workspace = true }

# Convenience
itertools = { workspace = true }
lazy_static = { workspace = true } # Added lazy_static


derive_test_helpers = { path = "../../../proc_macros/syn_parser/derive_test_helpers" }

[dev-dependencies]
tempfile = "3.10"                                                                  # For creating temporary files/dirs in tests
env_logger = "0.11"                                                                # Add env_logger for test logging
ploke-test-macros = { path = "../../../proc_macros/syn_parser/ploke-test-macros" } # Add dependency on the

# Feature flags
[features]
default = [
    "type_bearing_ids",
    "validate",
    "reexport",
    "not_wip_marker",
    "cfg_eval",
]
feature_a = [] # Add feature_a used by fixture
feature_b = [] # Add feature_b used by test
verbose_debug = []
temp_target = []
not_wip_marker = []
type_bearing_ids = []
ghost_data_graphs = []
validate = []
public_path = []
mod_tree_cfg = []
reexport = []
# Post-MVP feature
workspace_vis = []
cfg_eval = []
