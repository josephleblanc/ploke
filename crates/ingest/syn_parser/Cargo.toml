[package]
name = "syn_parser"
version = "0.1.0"
edition = "2021"
description = "A Rust code parser and analyzer using syn"
authors = ["Your Name <your.email@example.com>"]

[dependencies]
# Parsing and code generation
syn = { workspace = true }
quote = { workspace = true }
proc-macro2 = { workspace = true }

# Serialization
serde = { workspace = true }
serde_json = { workspace = true }
ron = { workspace = true }

# Concurrency and parallelism
rayon = { workspace = true }
flume = { workspace = true }
tokio = { workspace = true }
dashmap = { workspace = true }

# Data structures and algorithms
petgraph = { workspace = true }
cozo = { workspace = true }
uuid = { workspace = true }

# Error handling
thiserror = { workspace = true }
ploke-common = { path = "../../common" }

[dev-dependencies]

# Feature flags
[features]
default = [
    "module_path_tracking",
    "use_statement_tracking",
    "visibility_resolution",
]
cozo_visitor = []
cozo_type_refactor = []
verbose_debug = []
# Phase 1-3 of visitor resolution refactor
# We will hold onto these for benchmarking for now, and leave them in `default`
# after the refactor is complete, but we should probably think about how not to
# clutter up the Cargo.toml file.
# It would be cool to be able to provide a really good comprehensive breakdown
# of how each component we add over time changes the performance of the parser.
module_path_tracking = []   # phase 1 (done)
use_statement_tracking = [] # phase 2 (done)
visibility_resolution = []  #phase 3 (current)
# Post-MVP feature
workspace_vis = []
