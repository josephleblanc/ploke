[
  {
    "prompt_idx": 0,
    "node_type": "function",
    "prompt": "Please look at the `state_manager` and `try_main` and find ways we might make it more efficient.",
    "snippet_info": [
      {
        "name": "use_imported_items",
        "dist": 1.5116612911224365,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "use_all_const_static",
        "dist": 1.6552778482437134,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.804555892944336,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "five",
        "dist": 1.8068938255310059,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 0,
    "node_type": "const",
    "prompt": "Please look at the `state_manager` and `try_main` and find ways we might make it more efficient.",
    "snippet_info": [
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.7341371774673462,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.7497992515563965,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "INNER_CONST",
        "dist": 1.7553110122680664,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.7956990003585815,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 1.8551571369171143,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "doc_attr_const",
        "dist": 1.891545057296753,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 1.9055031538009644,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "EXPR_CONST",
        "dist": 1.9132269620895386,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 1.923221230506897,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 0,
    "node_type": "enum",
    "prompt": "Please look at the `state_manager` and `try_main` and find ways we might make it more efficient.",
    "snippet_info": [
      {
        "name": "OnlyStructVariants",
        "dist": 1.9202810525894165,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.925425410270691,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.9738689661026,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.9866838455200195,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 2.0041611194610596,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 2.0155649185180664,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 2.03548526763916,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 2.040862798690796,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 2.063361406326294,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 2.1199259757995605,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 2.1327552795410156,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 2.1487135887145996,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 2.1751043796539307,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 2.20063853263855,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 2.249229669570923,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 0,
    "node_type": "macro",
    "prompt": "Please look at the `state_manager` and `try_main` and find ways we might make it more efficient.",
    "snippet_info": [
      {
        "name": "local_macro",
        "dist": 1.8875327110290527,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      },
      {
        "name": "exported_macro",
        "dist": 2.0243396759033203,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 2.066385507583618,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 2.0667967796325684,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 0,
    "node_type": "module",
    "prompt": "Please look at the `state_manager` and `try_main` and find ways we might make it more efficient.",
    "snippet_info": [
      {
        "name": "inner",
        "dist": 1.7022922039031982,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "sub_imports",
        "dist": 1.791311264038086,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.7961100339889526,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.8870364427566528,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "inner_mod",
        "dist": 1.9088411331176758,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "nested_sub",
        "dist": 1.9467908143997192,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "unions",
        "dist": 1.9616154432296753,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "impls",
        "dist": 1.9747817516326904,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "imports",
        "dist": 1.99750554561615,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "structs",
        "dist": 2.0074853897094727,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "const_static",
        "dist": 2.009047031402588,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "enums",
        "dist": 2.014481782913208,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "inner",
        "dist": 2.0483250617980957,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "traits",
        "dist": 2.0847935676574707,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "type_alias",
        "dist": 2.08591365814209,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod type_alias;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 0,
    "node_type": "static",
    "prompt": "Please look at the `state_manager` and `try_main` and find ways we might make it more efficient.",
    "snippet_info": [
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.6771788597106934,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.7107234001159668,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 1.7979865074157715,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.8113892078399658,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.8336918354034424,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 1.9094936847686768,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 0,
    "node_type": "struct",
    "prompt": "Please look at the `state_manager` and `try_main` and find ways we might make it more efficient.",
    "snippet_info": [
      {
        "name": "SimpleStruct",
        "dist": 1.804201364517212,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      },
      {
        "name": "InnerStruct",
        "dist": 1.9587905406951904,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.9645745754241943,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "SubItem",
        "dist": 1.9825901985168457,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "NestedItem",
        "dist": 1.993466854095459,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "TupleStruct",
        "dist": 1.994977593421936,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "Container",
        "dist": 2.0076677799224854,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "PrivateStruct",
        "dist": 2.0131564140319824,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "UnitStruct",
        "dist": 2.0421273708343506,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "DocumentedStruct",
        "dist": 2.0494327545166016,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SampleStruct",
        "dist": 2.099482297897339,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "AttributedStruct",
        "dist": 2.1454720497131348,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 2.1465981006622314,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 2.1650960445404053,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 0,
    "node_type": "trait",
    "prompt": "Please look at the `state_manager` and `try_main` and find ways we might make it more efficient.",
    "snippet_info": [
      {
        "name": "ComplexGenericTrait",
        "dist": 1.5895534753799438,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "MultiSuperTrait",
        "dist": 1.6347535848617554,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait MultiSuperTrait: SimpleTrait + InternalTrait + Debug {\n    fn multi_super_method(&self);\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.6983479261398315,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 1.7445204257965088,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.7538034915924072,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.7710106372833252,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "InternalTrait",
        "dist": 1.779455304145813,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      },
      {
        "name": "AttributedTrait",
        "dist": 1.7854334115982056,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "SuperGraphNodeTrait",
        "dist": 1.8228963613510132,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }"
      },
      {
        "name": "AssocConstTrait",
        "dist": 1.8266444206237793,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "SuperTrait",
        "dist": 1.8331701755523682,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SuperTrait: SimpleTrait {\n    fn super_method(&self);\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.8415334224700928,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "AssocTypeTrait",
        "dist": 1.868152141571045,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeTrait {\n    type Output;\n    fn generate(&self) -> Self::Output;\n}"
      },
      {
        "name": "ExampleTrait",
        "dist": 1.8834402561187744,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "trait ExampleTrait {\n    /// An associated constant required by a trait.\n    const TRAIT_REQ_CONST: bool;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.8959769010543823,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait SimpleTrait {\n    fn trait_method(&self) -> i32;\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 0,
    "node_type": "type_alias",
    "prompt": "Please look at the `state_manager` and `try_main` and find ways we might make it more efficient.",
    "snippet_info": [
      {
        "name": "DynDrawable",
        "dist": 1.7368667125701904,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "UseInner",
        "dist": 1.9032583236694336,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 1.9158060550689697,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "Mapping",
        "dist": 1.925645112991333,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type Mapping<K, V> = std::collections::HashMap<K, V>;"
      },
      {
        "name": "DisplayableContainer",
        "dist": 1.930362343788147,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "MutRawPtr",
        "dist": 1.9559690952301025,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "MathOperation",
        "dist": 1.958423137664795,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MathOperation = fn(i32, i32) -> i32;"
      },
      {
        "name": "ConstRawPtr",
        "dist": 1.983323335647583,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type ConstRawPtr = *const u8;"
      },
      {
        "name": "ComplexGeneric",
        "dist": 2.015643358230591,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      },
      {
        "name": "CrateBuffer",
        "dist": 2.0258774757385254,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(crate) type CrateBuffer = Vec<u8>;"
      },
      {
        "name": "InternalCounter",
        "dist": 2.0282325744628906,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InternalCounter = i32;"
      },
      {
        "name": "MyInt",
        "dist": 2.0327796936035156,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Type alias used in a constant.\ntype MyInt = i32;"
      },
      {
        "name": "MutStrSlice",
        "dist": 2.054556369781494,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 2.055724620819092,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "InnerSecret",
        "dist": 2.0766499042510986,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InnerSecret = bool;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 0,
    "node_type": "union",
    "prompt": "Please look at the `state_manager` and `try_main` and find ways we might make it more efficient.",
    "snippet_info": [
      {
        "name": "ReprCUnion",
        "dist": 1.7478058338165283,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.7574613094329834,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "GenericUnion",
        "dist": 1.7866532802581787,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "CrateUnion",
        "dist": 1.8893301486968994,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.914014220237732,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "InnerSecret",
        "dist": 1.9669907093048096,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.9749822616577148,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 1.98020339012146,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "SecretData",
        "dist": 2.053684711456299,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 1,
    "node_type": "function",
    "prompt": "I don't really like how we are handling the events in our main UI drawing loop. It might be better to move it into the `event_bus` somehow, but we will need to build out the event loop in the event_bus to better handle receiving these events. Add a new implemention for this.",
    "snippet_info": [
      {
        "name": "use_all_const_static",
        "dist": 1.7285792827606201,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "use_imported_items",
        "dist": 1.7529371976852417,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "five",
        "dist": 1.9887349605560303,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.9957598447799683,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 1,
    "node_type": "const",
    "prompt": "I don't really like how we are handling the events in our main UI drawing loop. It might be better to move it into the `event_bus` somehow, but we will need to build out the event loop in the event_bus to better handle receiving these events. Add a new implemention for this.",
    "snippet_info": [
      {
        "name": "INNER_CONST",
        "dist": 1.9639294147491455,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 2.0071635246276855,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 2.008443832397461,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 2.019620895385742,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 2.0311501026153564,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "EXPR_CONST",
        "dist": 2.0605788230895996,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "doc_attr_const",
        "dist": 2.0973525047302246,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 2.1213057041168213,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 2.122483730316162,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 1,
    "node_type": "enum",
    "prompt": "I don't really like how we are handling the events in our main UI drawing loop. It might be better to move it into the `event_bus` somehow, but we will need to build out the event loop in the event_bus to better handle receiving these events. Add a new implemention for this.",
    "snippet_info": [
      {
        "name": "OnlyTupleVariants",
        "dist": 1.8769277334213257,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.98906672000885,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.9934523105621338,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 2.016274929046631,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 2.023759603500366,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 2.0272321701049805,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 2.07804012298584,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 2.0874500274658203,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 2.0930259227752686,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 2.1231467723846436,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 2.1351003646850586,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 2.145441770553589,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 2.219829797744751,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 2.238133192062378,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 2.2405850887298584,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 1,
    "node_type": "macro",
    "prompt": "I don't really like how we are handling the events in our main UI drawing loop. It might be better to move it into the `event_bus` somehow, but we will need to build out the event loop in the event_bus to better handle receiving these events. Add a new implemention for this.",
    "snippet_info": [
      {
        "name": "attributed_macro",
        "dist": 1.6953370571136475,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.911332368850708,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 1.9231733083724976,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      },
      {
        "name": "exported_macro",
        "dist": 1.9321088790893555,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 1,
    "node_type": "module",
    "prompt": "I don't really like how we are handling the events in our main UI drawing loop. It might be better to move it into the `event_bus` somehow, but we will need to build out the event loop in the event_bus to better handle receiving these events. Add a new implemention for this.",
    "snippet_info": [
      {
        "name": "inner",
        "dist": 1.7903748750686646,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "inner_mod",
        "dist": 1.8077986240386963,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "unions",
        "dist": 1.8585247993469238,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "sub_imports",
        "dist": 1.8926124572753906,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.9044907093048096,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.9327292442321777,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "structs",
        "dist": 1.9349279403686523,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "inner",
        "dist": 1.952324628829956,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "macros",
        "dist": 1.9743077754974365,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "impls",
        "dist": 1.98465895652771,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "enums",
        "dist": 1.9921643733978271,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "nested_sub",
        "dist": 1.994936227798462,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "const_static",
        "dist": 2.0040066242218018,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "imports",
        "dist": 2.01344633102417,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "traits",
        "dist": 2.0635552406311035,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 1,
    "node_type": "static",
    "prompt": "I don't really like how we are handling the events in our main UI drawing loop. It might be better to move it into the `event_bus` somehow, but we will need to build out the event loop in the event_bus to better handle receiving these events. Add a new implemention for this.",
    "snippet_info": [
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 1.7867140769958496,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.7927334308624268,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 1.8498287200927734,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.9184768199920654,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 2.021806240081787,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 2.0410423278808594,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 1,
    "node_type": "struct",
    "prompt": "I don't really like how we are handling the events in our main UI drawing loop. It might be better to move it into the `event_bus` somehow, but we will need to build out the event loop in the event_bus to better handle receiving these events. Add a new implemention for this.",
    "snippet_info": [
      {
        "name": "SimpleStruct",
        "dist": 1.8436017036437988,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      },
      {
        "name": "SubItem",
        "dist": 1.8940730094909668,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "NestedItem",
        "dist": 1.9325885772705078,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "InnerStruct",
        "dist": 1.9415650367736816,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "UnitStruct",
        "dist": 1.9574499130249023,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "Container",
        "dist": 1.970346212387085,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "TupleStruct",
        "dist": 1.9706861972808838,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.9808274507522583,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "SampleStruct",
        "dist": 1.9817476272583008,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 1.9992578029632568,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "PrivateStruct",
        "dist": 2.0157992839813232,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "AttributedStruct",
        "dist": 2.0376620292663574,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "DocumentedStruct",
        "dist": 2.059211015701294,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 2.0836477279663086,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 1,
    "node_type": "trait",
    "prompt": "I don't really like how we are handling the events in our main UI drawing loop. It might be better to move it into the `event_bus` somehow, but we will need to build out the event loop in the event_bus to better handle receiving these events. Add a new implemention for this.",
    "snippet_info": [
      {
        "name": "ComplexGenericTrait",
        "dist": 1.778903603553772,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 1.857742190361023,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "SuperGraphNodeTrait",
        "dist": 1.8931095600128174,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.9170265197753906,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "AssocConstTrait",
        "dist": 1.926917314529419,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.940839171409607,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn process(&self, item: T) -> T;\n}"
      },
      {
        "name": "CrateTrait",
        "dist": 1.9442628622055054,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(crate) trait CrateTrait {\n    fn crate_method(&self);\n}"
      },
      {
        "name": "AssocTypeTrait",
        "dist": 1.9467662572860718,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeTrait {\n    type Output;\n    fn generate(&self) -> Self::Output;\n}"
      },
      {
        "name": "MultiSuperTrait",
        "dist": 1.9714362621307373,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait MultiSuperTrait: SimpleTrait + InternalTrait + Debug {\n    fn multi_super_method(&self);\n}"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.9804387092590332,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 2.0044031143188477,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "InternalTrait",
        "dist": 2.029709815979004,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      },
      {
        "name": "LifetimeTrait",
        "dist": 2.030613899230957,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait LifetimeTrait<'a> {\n    fn get_ref(&'a self) -> &'a str;\n}"
      },
      {
        "name": "SuperTrait",
        "dist": 2.032069683074951,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SuperTrait: SimpleTrait {\n    fn super_method(&self);\n}"
      },
      {
        "name": "AttributedTrait",
        "dist": 2.0376784801483154,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 1,
    "node_type": "type_alias",
    "prompt": "I don't really like how we are handling the events in our main UI drawing loop. It might be better to move it into the `event_bus` somehow, but we will need to build out the event loop in the event_bus to better handle receiving these events. Add a new implemention for this.",
    "snippet_info": [
      {
        "name": "CrateBuffer",
        "dist": 1.822770595550537,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(crate) type CrateBuffer = Vec<u8>;"
      },
      {
        "name": "DisplayableContainer",
        "dist": 1.8290894031524658,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "DynDrawable",
        "dist": 1.8734526634216309,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 1.8783423900604248,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "InternalCounter",
        "dist": 1.8797123432159424,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InternalCounter = i32;"
      },
      {
        "name": "MathOperation",
        "dist": 1.9028964042663574,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MathOperation = fn(i32, i32) -> i32;"
      },
      {
        "name": "MyInt",
        "dist": 1.940890908241272,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Type alias used in a constant.\ntype MyInt = i32;"
      },
      {
        "name": "UseInner",
        "dist": 1.9453511238098145,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "MutRawPtr",
        "dist": 1.9516690969467163,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "OldId",
        "dist": 1.990962266921997,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 1.9995694160461426,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "IdAlias",
        "dist": 2.003741979598999,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type IdAlias = SimpleId;"
      },
      {
        "name": "Mapping",
        "dist": 2.0179953575134277,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type Mapping<K, V> = std::collections::HashMap<K, V>;"
      },
      {
        "name": "OuterPoint",
        "dist": 2.0202314853668213,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      },
      {
        "name": "ConstRawPtr",
        "dist": 2.0227112770080566,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type ConstRawPtr = *const u8;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 1,
    "node_type": "union",
    "prompt": "I don't really like how we are handling the events in our main UI drawing loop. It might be better to move it into the `event_bus` somehow, but we will need to build out the event loop in the event_bus to better handle receiving these events. Add a new implemention for this.",
    "snippet_info": [
      {
        "name": "CrateUnion",
        "dist": 1.7835040092468262,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "ReprCUnion",
        "dist": 1.871551752090454,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.8877487182617188,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "GenericUnion",
        "dist": 1.8903640508651733,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.8988769054412842,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.9364800453186035,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "SecretData",
        "dist": 1.9474940299987793,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 1.9714500904083252,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 1.996596097946167,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 2,
    "node_type": "function",
    "prompt": "We need to come up with a more comprehensive way to structure our configuration for the LLM settings, and allow the user to select from more models that have default settings. How could we go about doing this?",
    "snippet_info": [
      {
        "name": "use_all_const_static",
        "dist": 1.840665578842163,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "use_imported_items",
        "dist": 1.848501205444336,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.9872612953186035,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "five",
        "dist": 2.0578489303588867,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 2,
    "node_type": "const",
    "prompt": "We need to come up with a more comprehensive way to structure our configuration for the LLM settings, and allow the user to select from more models that have default settings. How could we go about doing this?",
    "snippet_info": [
      {
        "name": "doc_attr_const",
        "dist": 1.8450610637664795,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 1.8620495796203613,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 1.9456639289855957,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.9771339893341064,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 2.01692271232605,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 2.034794330596924,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "EXPR_CONST",
        "dist": 2.0821280479431152,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "INNER_CONST",
        "dist": 2.0908122062683105,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 2.0972371101379395,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 2,
    "node_type": "enum",
    "prompt": "We need to come up with a more comprehensive way to structure our configuration for the LLM settings, and allow the user to select from more models that have default settings. How could we go about doing this?",
    "snippet_info": [
      {
        "name": "GenericEnum",
        "dist": 1.6487245559692383,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.6580135822296143,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.6754094362258911,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.676954746246338,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.6788740158081055,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.691441297531128,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.803582787513733,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.8267072439193726,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.8278353214263916,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 1.8449270725250244,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 1.8514699935913086,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.876631498336792,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.8789231777191162,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 1.8979249000549316,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 1.9697012901306152,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 2,
    "node_type": "macro",
    "prompt": "We need to come up with a more comprehensive way to structure our configuration for the LLM settings, and allow the user to select from more models that have default settings. How could we go about doing this?",
    "snippet_info": [
      {
        "name": "exported_macro",
        "dist": 1.7005103826522827,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 1.752426028251648,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.759226679801941,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 1.9443457126617432,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 2,
    "node_type": "module",
    "prompt": "We need to come up with a more comprehensive way to structure our configuration for the LLM settings, and allow the user to select from more models that have default settings. How could we go about doing this?",
    "snippet_info": [
      {
        "name": "macros",
        "dist": 1.7163519859313965,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "sub_imports",
        "dist": 1.7799317836761475,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "traits",
        "dist": 1.7908341884613037,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "inner",
        "dist": 1.7980097532272339,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "structs",
        "dist": 1.8067692518234253,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "enums",
        "dist": 1.8071510791778564,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "impls",
        "dist": 1.8304167985916138,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "inner",
        "dist": 1.8317523002624512,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "nested_sub",
        "dist": 1.845253348350525,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "unions",
        "dist": 1.8488292694091797,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "imports",
        "dist": 1.8638594150543213,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "inner_mod",
        "dist": 1.8927878141403198,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "inner",
        "dist": 1.9409669637680054,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.9533575773239136,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "type_alias",
        "dist": 1.9725921154022217,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod type_alias;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 2,
    "node_type": "static",
    "prompt": "We need to come up with a more comprehensive way to structure our configuration for the LLM settings, and allow the user to select from more models that have default settings. How could we go about doing this?",
    "snippet_info": [
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.760582685470581,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.8618286848068237,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.9834315776824951,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 2.037792444229126,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 2.0461337566375732,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 2.100221633911133,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 2,
    "node_type": "struct",
    "prompt": "We need to come up with a more comprehensive way to structure our configuration for the LLM settings, and allow the user to select from more models that have default settings. How could we go about doing this?",
    "snippet_info": [
      {
        "name": "NestedItem",
        "dist": 1.858580470085144,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "UnitStruct",
        "dist": 1.865515947341919,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "GenericStruct",
        "dist": 1.8795017004013062,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 1.881906270980835,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "DocumentedStruct",
        "dist": 1.9068245887756348,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SubItem",
        "dist": 1.9208909273147583,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "PrivateStruct",
        "dist": 1.9282535314559937,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "InnerStruct",
        "dist": 1.9892773628234863,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.0029714107513428,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.0031967163085938,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "SampleStruct",
        "dist": 2.005887269973755,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "AttributedStruct",
        "dist": 2.012014865875244,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "TupleStruct",
        "dist": 2.034006118774414,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "Container",
        "dist": 2.057830572128296,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 2,
    "node_type": "trait",
    "prompt": "We need to come up with a more comprehensive way to structure our configuration for the LLM settings, and allow the user to select from more models that have default settings. How could we go about doing this?",
    "snippet_info": [
      {
        "name": "InternalTrait",
        "dist": 1.7165518999099731,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.8511637449264526,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.8642913103103638,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "DocumentedTrait",
        "dist": 1.8692606687545776,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "MultiSuperTrait",
        "dist": 1.8777918815612793,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait MultiSuperTrait: SimpleTrait + InternalTrait + Debug {\n    fn multi_super_method(&self);\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.8806109428405762,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "GenericSuperTrait",
        "dist": 1.887458086013794,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericSuperTrait<T>: GenericTrait<T> {\n    fn generic_super_method(&self, item: T);\n}"
      },
      {
        "name": "AssocConstTrait",
        "dist": 1.9038605690002441,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "AssocTypeTrait",
        "dist": 1.9266698360443115,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeTrait {\n    type Output;\n    fn generate(&self) -> Self::Output;\n}"
      },
      {
        "name": "ComplexGenericTrait",
        "dist": 1.931804895401001,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.93977689743042,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "AttributedTrait",
        "dist": 1.9455713033676147,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 1.9656386375427246,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "PrivateTrait",
        "dist": 1.968183994293213,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "trait PrivateTrait {\n    fn private_trait_method(&self);\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.972306251525879,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn generic_trait_method(&self, value: T);\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 2,
    "node_type": "type_alias",
    "prompt": "We need to come up with a more comprehensive way to structure our configuration for the LLM settings, and allow the user to select from more models that have default settings. How could we go about doing this?",
    "snippet_info": [
      {
        "name": "GenericContainer",
        "dist": 1.7648882865905762,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type GenericContainer<T> = Vec<T>;"
      },
      {
        "name": "DisplayableContainer",
        "dist": 1.7898651361465454,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "ComplexGeneric",
        "dist": 1.9334290027618408,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      },
      {
        "name": "Mapping",
        "dist": 1.9378950595855713,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type Mapping<K, V> = std::collections::HashMap<K, V>;"
      },
      {
        "name": "ConstRawPtr",
        "dist": 1.9640114307403564,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type ConstRawPtr = *const u8;"
      },
      {
        "name": "OldId",
        "dist": 1.9958161115646362,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 2.0188629627227783,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "OuterPoint",
        "dist": 2.036282539367676,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      },
      {
        "name": "CrateBuffer",
        "dist": 2.047780990600586,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(crate) type CrateBuffer = Vec<u8>;"
      },
      {
        "name": "SimpleId",
        "dist": 2.0500359535217285,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type SimpleId = u64;"
      },
      {
        "name": "InnerPublic",
        "dist": 2.0637717247009277,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type InnerPublic = f64;"
      },
      {
        "name": "IdAlias",
        "dist": 2.0730578899383545,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type IdAlias = SimpleId;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 2.0757951736450195,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "UseInner",
        "dist": 2.076780080795288,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "Point",
        "dist": 2.0769286155700684,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "/// Documented public alias for a tuple type\npub type Point = (i32, i32);"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 2,
    "node_type": "union",
    "prompt": "We need to come up with a more comprehensive way to structure our configuration for the LLM settings, and allow the user to select from more models that have default settings. How could we go about doing this?",
    "snippet_info": [
      {
        "name": "GenericUnion",
        "dist": 1.7483739852905273,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.875566005706787,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.9889979362487793,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "IntOrFloat",
        "dist": 2.007110595703125,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 2.0137295722961426,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "SecretData",
        "dist": 2.0157394409179688,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 2.0579066276550293,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "CrateUnion",
        "dist": 2.0714025497436523,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "ReprCUnion",
        "dist": 2.1918208599090576,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 3,
    "node_type": "function",
    "prompt": "We need to refactor our main draw and render messages processes, since right now there are some inefficiencies in those files. Look at the responsible functions and identify the ways they could be improved, then generate some tests to ensure they are being implemented correctly, asking for my feedback from UI drawing where needed.",
    "snippet_info": [
      {
        "name": "use_imported_items",
        "dist": 1.5407992601394653,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "use_all_const_static",
        "dist": 1.6443548202514648,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "five",
        "dist": 1.9263741970062256,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.9311598539352417,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 3,
    "node_type": "const",
    "prompt": "We need to refactor our main draw and render messages processes, since right now there are some inefficiencies in those files. Look at the responsible functions and identify the ways they could be improved, then generate some tests to ensure they are being implemented correctly, asking for my feedback from UI drawing where needed.",
    "snippet_info": [
      {
        "name": "doc_attr_const",
        "dist": 1.8371065855026245,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "INNER_CONST",
        "dist": 1.9524174928665161,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 1.9748249053955078,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.9803870916366577,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.985079288482666,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 2.014125347137451,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 2.0584959983825684,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 2.0664515495300293,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "EXPR_CONST",
        "dist": 2.165908098220825,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 3,
    "node_type": "enum",
    "prompt": "We need to refactor our main draw and render messages processes, since right now there are some inefficiencies in those files. Look at the responsible functions and identify the ways they could be improved, then generate some tests to ensure they are being implemented correctly, asking for my feedback from UI drawing where needed.",
    "snippet_info": [
      {
        "name": "JustConstGeneric",
        "dist": 1.8721404075622559,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.89866304397583,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.9188212156295776,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.929180383682251,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.9382063150405884,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.9384173154830933,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.9577832221984863,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.9668049812316895,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.975669264793396,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 2.0632028579711914,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 2.101949691772461,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 2.1568238735198975,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 2.1692330837249756,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 2.26176118850708,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 2.277702569961548,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 3,
    "node_type": "macro",
    "prompt": "We need to refactor our main draw and render messages processes, since right now there are some inefficiencies in those files. Look at the responsible functions and identify the ways they could be improved, then generate some tests to ensure they are being implemented correctly, asking for my feedback from UI drawing where needed.",
    "snippet_info": [
      {
        "name": "exported_macro",
        "dist": 1.8816949129104614,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.9261362552642822,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 2.0191454887390137,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 2.078439950942993,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 3,
    "node_type": "module",
    "prompt": "We need to refactor our main draw and render messages processes, since right now there are some inefficiencies in those files. Look at the responsible functions and identify the ways they could be improved, then generate some tests to ensure they are being implemented correctly, asking for my feedback from UI drawing where needed.",
    "snippet_info": [
      {
        "name": "inner_mod",
        "dist": 1.723834753036499,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "inner",
        "dist": 1.7821173667907715,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.8286895751953125,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.853527307510376,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "sub_imports",
        "dist": 1.8765811920166016,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.903702974319458,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "imports",
        "dist": 1.9069480895996094,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "const_static",
        "dist": 1.9939966201782227,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "impls",
        "dist": 2.0143203735351562,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "structs",
        "dist": 2.0408873558044434,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "macros",
        "dist": 2.049851179122925,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "nested_sub",
        "dist": 2.0738821029663086,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "unions",
        "dist": 2.082451581954956,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "enums",
        "dist": 2.0941643714904785,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "traits",
        "dist": 2.13057017326355,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 3,
    "node_type": "static",
    "prompt": "We need to refactor our main draw and render messages processes, since right now there are some inefficiencies in those files. Look at the responsible functions and identify the ways they could be improved, then generate some tests to ensure they are being implemented correctly, asking for my feedback from UI drawing where needed.",
    "snippet_info": [
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.7042856216430664,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.871506690979004,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 1.9103870391845703,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.9428181648254395,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 1.950748085975647,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 2.005622386932373,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 3,
    "node_type": "struct",
    "prompt": "We need to refactor our main draw and render messages processes, since right now there are some inefficiencies in those files. Look at the responsible functions and identify the ways they could be improved, then generate some tests to ensure they are being implemented correctly, asking for my feedback from UI drawing where needed.",
    "snippet_info": [
      {
        "name": "DocumentedStruct",
        "dist": 1.892524003982544,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.9172215461730957,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      },
      {
        "name": "SampleStruct",
        "dist": 1.925710916519165,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.9415569305419922,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "TupleStruct",
        "dist": 1.9703736305236816,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "AttributedStruct",
        "dist": 1.9746110439300537,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SubItem",
        "dist": 1.9791377782821655,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "UnitStruct",
        "dist": 1.9945284128189087,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "InnerStruct",
        "dist": 2.024617910385132,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "GenericStruct",
        "dist": 2.028320074081421,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "Container",
        "dist": 2.0456321239471436,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "PrivateStruct",
        "dist": 2.047281265258789,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "NestedItem",
        "dist": 2.0813148021698,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "GenericStruct",
        "dist": 2.105503559112549,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 3,
    "node_type": "trait",
    "prompt": "We need to refactor our main draw and render messages processes, since right now there are some inefficiencies in those files. Look at the responsible functions and identify the ways they could be improved, then generate some tests to ensure they are being implemented correctly, asking for my feedback from UI drawing where needed.",
    "snippet_info": [
      {
        "name": "ComplexGenericTrait",
        "dist": 1.8083183765411377,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "AttributedTrait",
        "dist": 1.836949110031128,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "SuperGraphNodeTrait",
        "dist": 1.8635212182998657,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }"
      },
      {
        "name": "DocumentedTrait",
        "dist": 1.9013311862945557,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "MultiSuperTrait",
        "dist": 1.9061436653137207,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait MultiSuperTrait: SimpleTrait + InternalTrait + Debug {\n    fn multi_super_method(&self);\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.9089515209197998,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 1.9109275341033936,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.9481556415557861,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn process(&self, item: T) -> T;\n}"
      },
      {
        "name": "InternalTrait",
        "dist": 1.9629075527191162,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.9827394485473633,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "ExampleTrait",
        "dist": 1.9946240186691284,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "trait ExampleTrait {\n    /// An associated constant required by a trait.\n    const TRAIT_REQ_CONST: bool;\n}"
      },
      {
        "name": "AssocTypeTrait",
        "dist": 2.000950336456299,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeTrait {\n    type Output;\n    fn generate(&self) -> Self::Output;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 2.008681535720825,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "AssocConstTrait",
        "dist": 2.0219249725341797,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "SuperTrait",
        "dist": 2.031804323196411,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SuperTrait: SimpleTrait {\n    fn super_method(&self);\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 3,
    "node_type": "type_alias",
    "prompt": "We need to refactor our main draw and render messages processes, since right now there are some inefficiencies in those files. Look at the responsible functions and identify the ways they could be improved, then generate some tests to ensure they are being implemented correctly, asking for my feedback from UI drawing where needed.",
    "snippet_info": [
      {
        "name": "DynDrawable",
        "dist": 1.6506518125534058,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "DisplayableContainer",
        "dist": 1.717942237854004,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 1.957794427871704,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "UseInner",
        "dist": 1.9601866006851196,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "Mapping",
        "dist": 1.9926183223724365,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type Mapping<K, V> = std::collections::HashMap<K, V>;"
      },
      {
        "name": "OldId",
        "dist": 2.0083727836608887,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "ByteArray",
        "dist": 2.0130650997161865,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ByteArray = [u8; 256];"
      },
      {
        "name": "ComplexGeneric",
        "dist": 2.021448850631714,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      },
      {
        "name": "MutRawPtr",
        "dist": 2.029179811477661,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 2.029658317565918,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "CrateBuffer",
        "dist": 2.030510663986206,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(crate) type CrateBuffer = Vec<u8>;"
      },
      {
        "name": "MyInt",
        "dist": 2.0421228408813477,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Type alias used in a constant.\ntype MyInt = i32;"
      },
      {
        "name": "GenericContainer",
        "dist": 2.0562849044799805,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type GenericContainer<T> = Vec<T>;"
      },
      {
        "name": "MutStrSlice",
        "dist": 2.073786735534668,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "OuterPoint",
        "dist": 2.086223602294922,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 3,
    "node_type": "union",
    "prompt": "We need to refactor our main draw and render messages processes, since right now there are some inefficiencies in those files. Look at the responsible functions and identify the ways they could be improved, then generate some tests to ensure they are being implemented correctly, asking for my feedback from UI drawing where needed.",
    "snippet_info": [
      {
        "name": "ReprCUnion",
        "dist": 1.902651309967041,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      },
      {
        "name": "GenericUnion",
        "dist": 1.9134588241577148,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.9506494998931885,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.9937937259674072,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "SecretData",
        "dist": 1.9953758716583252,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "CrateUnion",
        "dist": 2.023181915283203,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 2.0537195205688477,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 2.0594482421875,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 2.209056854248047,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 4,
    "node_type": "function",
    "prompt": "Look through the clone calls and find ways to make the program more efficient by implementing a switch to different approaches to implementing the functions that are making the deepest clones.",
    "snippet_info": [
      {
        "name": "use_all_const_static",
        "dist": 1.5998964309692383,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "use_imported_items",
        "dist": 1.6664154529571533,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.8103699684143066,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "five",
        "dist": 1.835045337677002,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 4,
    "node_type": "const",
    "prompt": "Look through the clone calls and find ways to make the program more efficient by implementing a switch to different approaches to implementing the functions that are making the deepest clones.",
    "snippet_info": [
      {
        "name": "doc_attr_const",
        "dist": 1.6082438230514526,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 1.6269257068634033,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 1.7461316585540771,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.7989202737808228,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.8064024448394775,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "INNER_CONST",
        "dist": 1.8563382625579834,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.8608511686325073,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 1.9268198013305664,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "EXPR_CONST",
        "dist": 1.9396584033966064,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 4,
    "node_type": "enum",
    "prompt": "Look through the clone calls and find ways to make the program more efficient by implementing a switch to different approaches to implementing the functions that are making the deepest clones.",
    "snippet_info": [
      {
        "name": "GenericEnum",
        "dist": 1.603952169418335,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.8052674531936646,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.8392417430877686,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.855811357498169,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.8960639238357544,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.9020148515701294,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.9239673614501953,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.9584424495697021,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 1.9691379070281982,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.9855215549468994,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.998971700668335,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 2.0432441234588623,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 2.1141772270202637,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 2.128822088241577,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 2.1646974086761475,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 4,
    "node_type": "macro",
    "prompt": "Look through the clone calls and find ways to make the program more efficient by implementing a switch to different approaches to implementing the functions that are making the deepest clones.",
    "snippet_info": [
      {
        "name": "exported_macro",
        "dist": 1.8170050382614136,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 1.8212621212005615,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 1.8589715957641602,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.9754612445831299,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 4,
    "node_type": "module",
    "prompt": "Look through the clone calls and find ways to make the program more efficient by implementing a switch to different approaches to implementing the functions that are making the deepest clones.",
    "snippet_info": [
      {
        "name": "inner",
        "dist": 1.5372952222824097,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.6575191020965576,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "inner_mod",
        "dist": 1.7810337543487549,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "sub_imports",
        "dist": 1.7811943292617798,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.8295503854751587,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "inner",
        "dist": 1.8514219522476196,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "traits",
        "dist": 1.9332308769226074,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "imports",
        "dist": 1.9499270915985107,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "structs",
        "dist": 1.9599840641021729,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "macros",
        "dist": 1.962132453918457,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "impls",
        "dist": 1.9656773805618286,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "nested_sub",
        "dist": 2.06681752204895,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "const_static",
        "dist": 2.071446657180786,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "enums",
        "dist": 2.0758156776428223,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "type_alias",
        "dist": 2.0828561782836914,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod type_alias;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 4,
    "node_type": "static",
    "prompt": "Look through the clone calls and find ways to make the program more efficient by implementing a switch to different approaches to implementing the functions that are making the deepest clones.",
    "snippet_info": [
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.7152326107025146,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 1.751652479171753,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.8115777969360352,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.8742034435272217,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.9356062412261963,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 2.000030517578125,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 4,
    "node_type": "struct",
    "prompt": "Look through the clone calls and find ways to make the program more efficient by implementing a switch to different approaches to implementing the functions that are making the deepest clones.",
    "snippet_info": [
      {
        "name": "SimpleStruct",
        "dist": 1.7277603149414062,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      },
      {
        "name": "InnerStruct",
        "dist": 1.884312629699707,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "UnitStruct",
        "dist": 1.906362533569336,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.9231036901474,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "PrivateStruct",
        "dist": 1.9234720468521118,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "SubItem",
        "dist": 1.9336552619934082,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "SampleStruct",
        "dist": 1.9455244541168213,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "TupleStruct",
        "dist": 1.9458203315734863,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "AttributedStruct",
        "dist": 1.9574522972106934,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "Container",
        "dist": 1.9821817874908447,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "GenericStruct",
        "dist": 2.0226290225982666,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "DocumentedStruct",
        "dist": 2.0311222076416016,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 2.043461561203003,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "NestedItem",
        "dist": 2.0777416229248047,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 4,
    "node_type": "trait",
    "prompt": "Look through the clone calls and find ways to make the program more efficient by implementing a switch to different approaches to implementing the functions that are making the deepest clones.",
    "snippet_info": [
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.4888827800750732,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "ComplexGenericTrait",
        "dist": 1.5594183206558228,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "MultiSuperTrait",
        "dist": 1.6179006099700928,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait MultiSuperTrait: SimpleTrait + InternalTrait + Debug {\n    fn multi_super_method(&self);\n}"
      },
      {
        "name": "AttributedTrait",
        "dist": 1.6752452850341797,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "InternalTrait",
        "dist": 1.680534839630127,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.6969239711761475,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 1.7135851383209229,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "DocumentedTrait",
        "dist": 1.7202417850494385,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "AssocTypeTrait",
        "dist": 1.7228858470916748,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeTrait {\n    type Output;\n    fn generate(&self) -> Self::Output;\n}"
      },
      {
        "name": "SuperTrait",
        "dist": 1.7365193367004395,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SuperTrait: SimpleTrait {\n    fn super_method(&self);\n}"
      },
      {
        "name": "SuperGraphNodeTrait",
        "dist": 1.7461979389190674,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.7774285078048706,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait SimpleTrait {\n    fn trait_method(&self) -> i32;\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.7984700202941895,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.801234483718872,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "InnerSecretTrait",
        "dist": 1.805814504623413,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InnerSecretTrait {\n        fn secret_op(&self);\n    }"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 4,
    "node_type": "type_alias",
    "prompt": "Look through the clone calls and find ways to make the program more efficient by implementing a switch to different approaches to implementing the functions that are making the deepest clones.",
    "snippet_info": [
      {
        "name": "ComplexGeneric",
        "dist": 1.5352656841278076,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      },
      {
        "name": "DynDrawable",
        "dist": 1.6549837589263916,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "MathOperation",
        "dist": 1.679303526878357,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MathOperation = fn(i32, i32) -> i32;"
      },
      {
        "name": "ByteArray",
        "dist": 1.74430513381958,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ByteArray = [u8; 256];"
      },
      {
        "name": "OldId",
        "dist": 1.7639484405517578,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "UseInner",
        "dist": 1.8329095840454102,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "InnerSecret",
        "dist": 1.8369330167770386,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InnerSecret = bool;"
      },
      {
        "name": "Mapping",
        "dist": 1.8490808010101318,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type Mapping<K, V> = std::collections::HashMap<K, V>;"
      },
      {
        "name": "MyInt",
        "dist": 1.8567795753479004,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Type alias used in a constant.\ntype MyInt = i32;"
      },
      {
        "name": "IdAlias",
        "dist": 1.857412338256836,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type IdAlias = SimpleId;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 1.8580784797668457,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 1.8644688129425049,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "MutRawPtr",
        "dist": 1.8848011493682861,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "ConstRawPtr",
        "dist": 1.926323413848877,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type ConstRawPtr = *const u8;"
      },
      {
        "name": "OuterPoint",
        "dist": 1.9283488988876343,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 4,
    "node_type": "union",
    "prompt": "Look through the clone calls and find ways to make the program more efficient by implementing a switch to different approaches to implementing the functions that are making the deepest clones.",
    "snippet_info": [
      {
        "name": "ReprCUnion",
        "dist": 1.6811270713806152,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      },
      {
        "name": "GenericUnion",
        "dist": 1.9469797611236572,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.9598278999328613,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.9776835441589355,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "CrateUnion",
        "dist": 2.019256591796875,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "SecretData",
        "dist": 2.033925771713257,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "IntOrFloat",
        "dist": 2.034839153289795,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 2.0414583683013916,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "DocumentedUnion",
        "dist": 2.1215779781341553,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 5,
    "node_type": "function",
    "prompt": "We need to find ways to make the program more efficient as a whole, but don't have good logging of the performance across different functions and uses. Research different approaches to adding performance tracking, such as the `criterion` collection, and provide a short report with a recommended path forward.",
    "snippet_info": [
      {
        "name": "use_all_const_static",
        "dist": 1.5255990028381348,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "use_imported_items",
        "dist": 1.6071524620056152,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.712838053703308,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "five",
        "dist": 1.776090383529663,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 5,
    "node_type": "const",
    "prompt": "We need to find ways to make the program more efficient as a whole, but don't have good logging of the performance across different functions and uses. Research different approaches to adding performance tracking, such as the `criterion` collection, and provide a short report with a recommended path forward.",
    "snippet_info": [
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.725535273551941,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.7290130853652954,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "INNER_CONST",
        "dist": 1.7626069784164429,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "doc_attr_const",
        "dist": 1.7740228176116943,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.7992249727249146,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 1.855969786643982,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 1.8952158689498901,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "EXPR_CONST",
        "dist": 1.9148552417755127,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 1.9752392768859863,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 5,
    "node_type": "enum",
    "prompt": "We need to find ways to make the program more efficient as a whole, but don't have good logging of the performance across different functions and uses. Research different approaches to adding performance tracking, such as the `criterion` collection, and provide a short report with a recommended path forward.",
    "snippet_info": [
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.751316785812378,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.7724189758300781,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.78864324092865,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.8220069408416748,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.8614308834075928,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.8917295932769775,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.9069945812225342,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.9080291986465454,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.9422725439071655,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 2.0051283836364746,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 2.0085606575012207,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 2.020998954772949,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 2.038581132888794,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 2.165322780609131,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 2.1811716556549072,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 5,
    "node_type": "macro",
    "prompt": "We need to find ways to make the program more efficient as a whole, but don't have good logging of the performance across different functions and uses. Research different approaches to adding performance tracking, such as the `criterion` collection, and provide a short report with a recommended path forward.",
    "snippet_info": [
      {
        "name": "exported_macro",
        "dist": 1.8282347917556763,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 1.8346997499465942,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 1.9076478481292725,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.9341518878936768,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 5,
    "node_type": "module",
    "prompt": "We need to find ways to make the program more efficient as a whole, but don't have good logging of the performance across different functions and uses. Research different approaches to adding performance tracking, such as the `criterion` collection, and provide a short report with a recommended path forward.",
    "snippet_info": [
      {
        "name": "inner",
        "dist": 1.7840466499328613,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.8727641105651855,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.9612889289855957,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "inner_mod",
        "dist": 1.9639805555343628,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "traits",
        "dist": 1.9764773845672607,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "inner",
        "dist": 1.985331416130066,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "structs",
        "dist": 1.9976308345794678,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "macros",
        "dist": 2.0063414573669434,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "imports",
        "dist": 2.0192458629608154,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "sub_imports",
        "dist": 2.028501033782959,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "const_static",
        "dist": 2.028991222381592,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "impls",
        "dist": 2.0568952560424805,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "unions",
        "dist": 2.070924997329712,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "enums",
        "dist": 2.0964808464050293,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "type_alias",
        "dist": 2.1438381671905518,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod type_alias;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 5,
    "node_type": "static",
    "prompt": "We need to find ways to make the program more efficient as a whole, but don't have good logging of the performance across different functions and uses. Research different approaches to adding performance tracking, such as the `criterion` collection, and provide a short report with a recommended path forward.",
    "snippet_info": [
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.791464924812317,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.7925586700439453,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 1.7954256534576416,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.882383942604065,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 1.9769294261932373,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.9868851900100708,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 5,
    "node_type": "struct",
    "prompt": "We need to find ways to make the program more efficient as a whole, but don't have good logging of the performance across different functions and uses. Research different approaches to adding performance tracking, such as the `criterion` collection, and provide a short report with a recommended path forward.",
    "snippet_info": [
      {
        "name": "SimpleStruct",
        "dist": 1.8971184492111206,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.9595346450805664,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "TupleStruct",
        "dist": 1.9682071208953857,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "AttributedStruct",
        "dist": 1.974994421005249,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "UnitStruct",
        "dist": 1.9830825328826904,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "DocumentedStruct",
        "dist": 1.995142936706543,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "InnerStruct",
        "dist": 2.0244240760803223,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "SubItem",
        "dist": 2.050023317337036,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "Container",
        "dist": 2.061185836791992,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "SampleStruct",
        "dist": 2.081057548522949,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 2.108171224594116,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 2.1142334938049316,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "NestedItem",
        "dist": 2.1182775497436523,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "PrivateStruct",
        "dist": 2.1482181549072266,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 5,
    "node_type": "trait",
    "prompt": "We need to find ways to make the program more efficient as a whole, but don't have good logging of the performance across different functions and uses. Research different approaches to adding performance tracking, such as the `criterion` collection, and provide a short report with a recommended path forward.",
    "snippet_info": [
      {
        "name": "AttributedTrait",
        "dist": 1.5890049934387207,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "MultiSuperTrait",
        "dist": 1.6640973091125488,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait MultiSuperTrait: SimpleTrait + InternalTrait + Debug {\n    fn multi_super_method(&self);\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.7380049228668213,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "DocumentedTrait",
        "dist": 1.7411073446273804,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "ComplexGenericTrait",
        "dist": 1.7625765800476074,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 1.7907934188842773,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.799384593963623,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "AssocTypeTrait",
        "dist": 1.840368390083313,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeTrait {\n    type Output;\n    fn generate(&self) -> Self::Output;\n}"
      },
      {
        "name": "SuperGraphNodeTrait",
        "dist": 1.8422503471374512,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }"
      },
      {
        "name": "SuperTrait",
        "dist": 1.848434567451477,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SuperTrait: SimpleTrait {\n    fn super_method(&self);\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.8630210161209106,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn process(&self, item: T) -> T;\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.8630818128585815,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "InternalTrait",
        "dist": 1.8680765628814697,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.8703560829162598,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait SimpleTrait {\n    fn trait_method(&self) -> i32;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.8815128803253174,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 5,
    "node_type": "type_alias",
    "prompt": "We need to find ways to make the program more efficient as a whole, but don't have good logging of the performance across different functions and uses. Research different approaches to adding performance tracking, such as the `criterion` collection, and provide a short report with a recommended path forward.",
    "snippet_info": [
      {
        "name": "DynDrawable",
        "dist": 1.7228689193725586,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "MathOperation",
        "dist": 1.8121626377105713,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MathOperation = fn(i32, i32) -> i32;"
      },
      {
        "name": "ConstRawPtr",
        "dist": 1.9150774478912354,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type ConstRawPtr = *const u8;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 1.9263746738433838,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "Mapping",
        "dist": 1.93483567237854,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type Mapping<K, V> = std::collections::HashMap<K, V>;"
      },
      {
        "name": "DisplayableContainer",
        "dist": 1.9412585496902466,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "OuterPoint",
        "dist": 1.965935230255127,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      },
      {
        "name": "MutRawPtr",
        "dist": 1.9694589376449585,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "MyInt",
        "dist": 1.9799089431762695,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Type alias used in a constant.\ntype MyInt = i32;"
      },
      {
        "name": "InternalCounter",
        "dist": 1.981771469116211,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InternalCounter = i32;"
      },
      {
        "name": "Point",
        "dist": 1.9940061569213867,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "/// Documented public alias for a tuple type\npub type Point = (i32, i32);"
      },
      {
        "name": "UseInner",
        "dist": 1.9988956451416016,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "MutStrSlice",
        "dist": 2.015115261077881,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 2.017423629760742,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "ByteArray",
        "dist": 2.0567519664764404,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ByteArray = [u8; 256];"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 5,
    "node_type": "union",
    "prompt": "We need to find ways to make the program more efficient as a whole, but don't have good logging of the performance across different functions and uses. Research different approaches to adding performance tracking, such as the `criterion` collection, and provide a short report with a recommended path forward.",
    "snippet_info": [
      {
        "name": "ReprCUnion",
        "dist": 1.6503708362579346,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.7787208557128906,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "GenericUnion",
        "dist": 1.9122920036315918,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.9313139915466309,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.9314764738082886,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "CrateUnion",
        "dist": 2.0282602310180664,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "SecretData",
        "dist": 2.0672295093536377,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 2.0729219913482666,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 2.0894994735717773,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 6,
    "node_type": "function",
    "prompt": "The project has been developing rapidly and we do not have very good test coverage. Develop a test strategy that can be implemented to add more test coverage, and implement the test plan. Do not remove any previous tests, and check as you go whether the tests are passing - if a test fails, then perform an analyzis to determine whether the test is failing because there is a problem with the implementation, or if there is a problem with your test, or id you are unsure and need more information from me before moving forward.",
    "snippet_info": [
      {
        "name": "use_imported_items",
        "dist": 1.9270864725112915,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "use_all_const_static",
        "dist": 2.106520175933838,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "five",
        "dist": 2.1371583938598633,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      },
      {
        "name": "ensure_features",
        "dist": 2.1598801612854004,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 6,
    "node_type": "const",
    "prompt": "The project has been developing rapidly and we do not have very good test coverage. Develop a test strategy that can be implemented to add more test coverage, and implement the test plan. Do not remove any previous tests, and check as you go whether the tests are passing - if a test fails, then perform an analyzis to determine whether the test is failing because there is a problem with the implementation, or if there is a problem with your test, or id you are unsure and need more information from me before moving forward.",
    "snippet_info": [
      {
        "name": "ARRAY_CONST",
        "dist": 2.071171760559082,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 2.1044623851776123,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 2.1624457836151123,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "EXPR_CONST",
        "dist": 2.1765036582946777,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "INNER_CONST",
        "dist": 2.177845001220703,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 2.214250326156616,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 2.216636896133423,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 2.2251462936401367,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "doc_attr_const",
        "dist": 2.2642784118652344,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 6,
    "node_type": "enum",
    "prompt": "The project has been developing rapidly and we do not have very good test coverage. Develop a test strategy that can be implemented to add more test coverage, and implement the test plan. Do not remove any previous tests, and check as you go whether the tests are passing - if a test fails, then perform an analyzis to determine whether the test is failing because there is a problem with the implementation, or if there is a problem with your test, or id you are unsure and need more information from me before moving forward.",
    "snippet_info": [
      {
        "name": "OnlyStructVariants",
        "dist": 1.8089998960494995,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.828374981880188,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.8928751945495605,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.9266388416290283,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 1.9461851119995117,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.947805643081665,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.9721505641937256,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.9983692169189453,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 2.023425340652466,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 2.035612106323242,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 2.0867109298706055,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 2.171046495437622,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 2.17388653755188,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 2.1791765689849854,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 2.181938648223877,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 6,
    "node_type": "macro",
    "prompt": "The project has been developing rapidly and we do not have very good test coverage. Develop a test strategy that can be implemented to add more test coverage, and implement the test plan. Do not remove any previous tests, and check as you go whether the tests are passing - if a test fails, then perform an analyzis to determine whether the test is failing because there is a problem with the implementation, or if there is a problem with your test, or id you are unsure and need more information from me before moving forward.",
    "snippet_info": [
      {
        "name": "local_macro",
        "dist": 2.1897120475769043,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      },
      {
        "name": "exported_macro",
        "dist": 2.1975269317626953,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 2.2660679817199707,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 2.2941722869873047,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 6,
    "node_type": "module",
    "prompt": "The project has been developing rapidly and we do not have very good test coverage. Develop a test strategy that can be implemented to add more test coverage, and implement the test plan. Do not remove any previous tests, and check as you go whether the tests are passing - if a test fails, then perform an analyzis to determine whether the test is failing because there is a problem with the implementation, or if there is a problem with your test, or id you are unsure and need more information from me before moving forward.",
    "snippet_info": [
      {
        "name": "inner",
        "dist": 2.03476619720459,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "impls",
        "dist": 2.0434746742248535,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "sub_imports",
        "dist": 2.077075481414795,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 2.1220650672912598,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "unions",
        "dist": 2.1572608947753906,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "nested_sub",
        "dist": 2.159452438354492,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "inner_mod",
        "dist": 2.174078941345215,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "enums",
        "dist": 2.1826491355895996,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "structs",
        "dist": 2.193974256515503,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "imports",
        "dist": 2.2117862701416016,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "inner",
        "dist": 2.2144722938537598,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "inner",
        "dist": 2.2321808338165283,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "macros",
        "dist": 2.232792854309082,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "type_alias",
        "dist": 2.2403697967529297,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod type_alias;"
      },
      {
        "name": "const_static",
        "dist": 2.2517411708831787,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 6,
    "node_type": "static",
    "prompt": "The project has been developing rapidly and we do not have very good test coverage. Develop a test strategy that can be implemented to add more test coverage, and implement the test plan. Do not remove any previous tests, and check as you go whether the tests are passing - if a test fails, then perform an analyzis to determine whether the test is failing because there is a problem with the implementation, or if there is a problem with your test, or id you are unsure and need more information from me before moving forward.",
    "snippet_info": [
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.9598337411880493,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 2.049346446990967,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 2.0723509788513184,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 2.2231273651123047,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 2.2509055137634277,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 2.3002634048461914,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 6,
    "node_type": "struct",
    "prompt": "The project has been developing rapidly and we do not have very good test coverage. Develop a test strategy that can be implemented to add more test coverage, and implement the test plan. Do not remove any previous tests, and check as you go whether the tests are passing - if a test fails, then perform an analyzis to determine whether the test is failing because there is a problem with the implementation, or if there is a problem with your test, or id you are unsure and need more information from me before moving forward.",
    "snippet_info": [
      {
        "name": "SampleStruct",
        "dist": 1.9672375917434692,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.9925720691680908,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      },
      {
        "name": "UnitStruct",
        "dist": 2.023293972015381,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.0843679904937744,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "TupleStruct",
        "dist": 2.084646224975586,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "SubItem",
        "dist": 2.10341739654541,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "AttributedStruct",
        "dist": 2.1100058555603027,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 2.124494791030884,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "NestedItem",
        "dist": 2.1300106048583984,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "PrivateStruct",
        "dist": 2.147340774536133,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "DocumentedStruct",
        "dist": 2.148275375366211,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "InnerStruct",
        "dist": 2.153959274291992,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "GenericStruct",
        "dist": 2.163269519805908,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "Container",
        "dist": 2.226221799850464,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 6,
    "node_type": "trait",
    "prompt": "The project has been developing rapidly and we do not have very good test coverage. Develop a test strategy that can be implemented to add more test coverage, and implement the test plan. Do not remove any previous tests, and check as you go whether the tests are passing - if a test fails, then perform an analyzis to determine whether the test is failing because there is a problem with the implementation, or if there is a problem with your test, or id you are unsure and need more information from me before moving forward.",
    "snippet_info": [
      {
        "name": "AttributedTrait",
        "dist": 1.8946733474731445,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "ComplexGenericTrait",
        "dist": 1.9105713367462158,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "MultiSuperTrait",
        "dist": 1.9821126461029053,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait MultiSuperTrait: SimpleTrait + InternalTrait + Debug {\n    fn multi_super_method(&self);\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 2.0224382877349854,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "DocumentedTrait",
        "dist": 2.0384392738342285,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 2.0650954246520996,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "AssocConstTrait",
        "dist": 2.084148406982422,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "ExampleTrait",
        "dist": 2.1251394748687744,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "trait ExampleTrait {\n    /// An associated constant required by a trait.\n    const TRAIT_REQ_CONST: bool;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 2.1281917095184326,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "GenericSuperTrait",
        "dist": 2.131554365158081,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericSuperTrait<T>: GenericTrait<T> {\n    fn generic_super_method(&self, item: T);\n}"
      },
      {
        "name": "InternalTrait",
        "dist": 2.1384100914001465,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      },
      {
        "name": "SuperTrait",
        "dist": 2.1576876640319824,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SuperTrait: SimpleTrait {\n    fn super_method(&self);\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 2.165604829788208,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 2.1753647327423096,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn generic_trait_method(&self, value: T);\n}"
      },
      {
        "name": "AssocTypeTrait",
        "dist": 2.17936110496521,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeTrait {\n    type Output;\n    fn generate(&self) -> Self::Output;\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 6,
    "node_type": "type_alias",
    "prompt": "The project has been developing rapidly and we do not have very good test coverage. Develop a test strategy that can be implemented to add more test coverage, and implement the test plan. Do not remove any previous tests, and check as you go whether the tests are passing - if a test fails, then perform an analyzis to determine whether the test is failing because there is a problem with the implementation, or if there is a problem with your test, or id you are unsure and need more information from me before moving forward.",
    "snippet_info": [
      {
        "name": "DynDrawable",
        "dist": 1.8065211772918701,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "OldId",
        "dist": 1.865994930267334,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "MutStrSlice",
        "dist": 1.9792273044586182,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "IdAlias",
        "dist": 2.03025484085083,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type IdAlias = SimpleId;"
      },
      {
        "name": "ByteArray",
        "dist": 2.0450775623321533,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ByteArray = [u8; 256];"
      },
      {
        "name": "MutRawPtr",
        "dist": 2.081555128097534,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "StrSlice",
        "dist": 2.088731288909912,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type StrSlice<'a> = &'a str;"
      },
      {
        "name": "Mapping",
        "dist": 2.102410316467285,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type Mapping<K, V> = std::collections::HashMap<K, V>;"
      },
      {
        "name": "SimpleId",
        "dist": 2.1290078163146973,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type SimpleId = u64;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 2.1395726203918457,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "Point",
        "dist": 2.1415135860443115,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "/// Documented public alias for a tuple type\npub type Point = (i32, i32);"
      },
      {
        "name": "ComplexGeneric",
        "dist": 2.149200677871704,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      },
      {
        "name": "MathOperation",
        "dist": 2.1775431632995605,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MathOperation = fn(i32, i32) -> i32;"
      },
      {
        "name": "DisplayableContainer",
        "dist": 2.1835269927978516,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "GenericContainer",
        "dist": 2.1890177726745605,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type GenericContainer<T> = Vec<T>;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 6,
    "node_type": "union",
    "prompt": "The project has been developing rapidly and we do not have very good test coverage. Develop a test strategy that can be implemented to add more test coverage, and implement the test plan. Do not remove any previous tests, and check as you go whether the tests are passing - if a test fails, then perform an analyzis to determine whether the test is failing because there is a problem with the implementation, or if there is a problem with your test, or id you are unsure and need more information from me before moving forward.",
    "snippet_info": [
      {
        "name": "ReprCUnion",
        "dist": 2.0156543254852295,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 2.021183729171753,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "SecretData",
        "dist": 2.02423357963562,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 2.037250280380249,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "GenericUnion",
        "dist": 2.049057960510254,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "IntOrFloat",
        "dist": 2.1366209983825684,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "CrateUnion",
        "dist": 2.139671564102173,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 2.1786651611328125,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "InnerPublic",
        "dist": 2.221590995788574,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 7,
    "node_type": "function",
    "prompt": "Where are there the greatest risks of race conditions in our multi-threaded event handling processes?",
    "snippet_info": [
      {
        "name": "five",
        "dist": 1.6730504035949707,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.711702823638916,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "use_all_const_static",
        "dist": 1.7473610639572144,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "use_imported_items",
        "dist": 1.981276273727417,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 7,
    "node_type": "const",
    "prompt": "Where are there the greatest risks of race conditions in our multi-threaded event handling processes?",
    "snippet_info": [
      {
        "name": "INNER_CONST",
        "dist": 1.6821268796920776,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.749647617340088,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.772097110748291,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.8060318231582642,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "EXPR_CONST",
        "dist": 1.8818833827972412,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "doc_attr_const",
        "dist": 1.8872171640396118,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 1.8890022039413452,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 1.974355697631836,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 2.0332727432250977,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 7,
    "node_type": "enum",
    "prompt": "Where are there the greatest risks of race conditions in our multi-threaded event handling processes?",
    "snippet_info": [
      {
        "name": "OnlyTupleVariants",
        "dist": 1.7086918354034424,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.7609425783157349,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.7930631637573242,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.8618711233139038,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.8888624906539917,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.8980880975723267,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 1.92769455909729,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.9391371011734009,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 1.954978108406067,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.9589428901672363,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.968083143234253,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.9847049713134766,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 2.0242772102355957,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 2.0685858726501465,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 2.0844132900238037,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 7,
    "node_type": "macro",
    "prompt": "Where are there the greatest risks of race conditions in our multi-threaded event handling processes?",
    "snippet_info": [
      {
        "name": "attributed_macro",
        "dist": 1.9088622331619263,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "exported_macro",
        "dist": 1.9464892148971558,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.9734346866607666,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 1.9988832473754883,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 7,
    "node_type": "module",
    "prompt": "Where are there the greatest risks of race conditions in our multi-threaded event handling processes?",
    "snippet_info": [
      {
        "name": "imports",
        "dist": 1.812337875366211,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "structs",
        "dist": 1.8694512844085693,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "unions",
        "dist": 1.872371792793274,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "traits",
        "dist": 1.888870358467102,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "inner",
        "dist": 1.9022622108459473,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "inner_mod",
        "dist": 1.906157374382019,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "impls",
        "dist": 1.9376380443572998,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "inner",
        "dist": 1.947899580001831,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "macros",
        "dist": 1.9485373497009277,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "inner",
        "dist": 1.9881905317306519,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "const_static",
        "dist": 1.996002435684204,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "inner",
        "dist": 2.01033091545105,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "sub_imports",
        "dist": 2.042982816696167,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "enums",
        "dist": 2.0549707412719727,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "nested_sub",
        "dist": 2.075249433517456,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 7,
    "node_type": "static",
    "prompt": "Where are there the greatest risks of race conditions in our multi-threaded event handling processes?",
    "snippet_info": [
      {
        "name": "TUPLE_STATIC",
        "dist": 1.8793323040008545,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.893242597579956,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.9027527570724487,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.9459376335144043,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 2.0203969478607178,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 2.0292892456054688,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 7,
    "node_type": "struct",
    "prompt": "Where are there the greatest risks of race conditions in our multi-threaded event handling processes?",
    "snippet_info": [
      {
        "name": "TupleStruct",
        "dist": 1.8787559270858765,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "InnerStruct",
        "dist": 1.902855634689331,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "Container",
        "dist": 1.935317039489746,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "GenericStruct",
        "dist": 1.9443645477294922,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 1.9510494470596313,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.9525679349899292,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "SubItem",
        "dist": 2.0102992057800293,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "NestedItem",
        "dist": 2.012627363204956,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "PrivateStruct",
        "dist": 2.0396082401275635,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.0410985946655273,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      },
      {
        "name": "UnitStruct",
        "dist": 2.0432658195495605,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "SampleStruct",
        "dist": 2.0730628967285156,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "DocumentedStruct",
        "dist": 2.0903732776641846,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "AttributedStruct",
        "dist": 2.0944831371307373,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 7,
    "node_type": "trait",
    "prompt": "Where are there the greatest risks of race conditions in our multi-threaded event handling processes?",
    "snippet_info": [
      {
        "name": "ComplexGenericTrait",
        "dist": 1.611894965171814,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.7768421173095703,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn process(&self, item: T) -> T;\n}"
      },
      {
        "name": "UnsafeTrait",
        "dist": 1.7990853786468506,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub unsafe trait UnsafeTrait {\n    unsafe fn unsafe_method(&self);\n}"
      },
      {
        "name": "MultiSuperTrait",
        "dist": 1.8170899152755737,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait MultiSuperTrait: SimpleTrait + InternalTrait + Debug {\n    fn multi_super_method(&self);\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.896321415901184,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.9261537790298462,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "CrateTrait",
        "dist": 1.9395314455032349,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(crate) trait CrateTrait {\n    fn crate_method(&self);\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.947599172592163,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait SimpleTrait {\n    fn trait_method(&self) -> i32;\n}"
      },
      {
        "name": "LifetimeTrait",
        "dist": 1.972320318222046,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait LifetimeTrait<'a> {\n    fn get_ref(&'a self) -> &'a str;\n}"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.9802274703979492,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "InnerPublicTrait",
        "dist": 2.008967876434326,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }"
      },
      {
        "name": "GenericSuperTrait",
        "dist": 2.0133843421936035,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericSuperTrait<T>: GenericTrait<T> {\n    fn generic_super_method(&self, item: T);\n}"
      },
      {
        "name": "SuperTrait",
        "dist": 2.0133914947509766,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SuperTrait: SimpleTrait {\n    fn super_method(&self);\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 2.017396926879883,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "ExampleTrait",
        "dist": 2.0292248725891113,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "trait ExampleTrait {\n    /// An associated constant required by a trait.\n    const TRAIT_REQ_CONST: bool;\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 7,
    "node_type": "type_alias",
    "prompt": "Where are there the greatest risks of race conditions in our multi-threaded event handling processes?",
    "snippet_info": [
      {
        "name": "DynDrawable",
        "dist": 1.8698689937591553,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "OuterPoint",
        "dist": 1.8977034091949463,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 1.9123890399932861,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "CrateBuffer",
        "dist": 1.9134149551391602,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(crate) type CrateBuffer = Vec<u8>;"
      },
      {
        "name": "MathOperation",
        "dist": 1.9161343574523926,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MathOperation = fn(i32, i32) -> i32;"
      },
      {
        "name": "InternalCounter",
        "dist": 1.9192721843719482,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InternalCounter = i32;"
      },
      {
        "name": "InnerPublic",
        "dist": 1.9411966800689697,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type InnerPublic = f64;"
      },
      {
        "name": "StrSlice",
        "dist": 1.9595422744750977,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type StrSlice<'a> = &'a str;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 1.967747688293457,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "ComplexGeneric",
        "dist": 1.9679248332977295,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      },
      {
        "name": "ConstRawPtr",
        "dist": 1.9691898822784424,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type ConstRawPtr = *const u8;"
      },
      {
        "name": "UseInner",
        "dist": 1.9696053266525269,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "MutRawPtr",
        "dist": 1.986799716949463,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "Point",
        "dist": 1.9878325462341309,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "/// Documented public alias for a tuple type\npub type Point = (i32, i32);"
      },
      {
        "name": "MutStrSlice",
        "dist": 1.999857783317566,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 7,
    "node_type": "union",
    "prompt": "Where are there the greatest risks of race conditions in our multi-threaded event handling processes?",
    "snippet_info": [
      {
        "name": "ReprCUnion",
        "dist": 1.83711576461792,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.8478078842163086,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "GenericUnion",
        "dist": 1.8647757768630981,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.8810573816299438,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.8944100141525269,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "CrateUnion",
        "dist": 1.8978338241577148,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 1.9135003089904785,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "SecretData",
        "dist": 1.9866957664489746,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 2.042189836502075,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 8,
    "node_type": "function",
    "prompt": "I am thinking about adding a new feature to allow for the user's input, once it has been searched in the code graph, to show the user which nodes were added to the LLM's context window by processing the results of the RAG query and database in a visual code graph. Right now I'm considering how to best implement this, and I think a good place to start would be with outputting the results of the queries to the database as a json file that can be processed by another crate into the visual code graph. Set up a scaffolding that will mock this other visual graph crate, showing how it would be incorporated into our current event system.",
    "snippet_info": [
      {
        "name": "use_all_const_static",
        "dist": 1.5553444623947144,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "use_imported_items",
        "dist": 1.5617938041687012,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.8056584596633911,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "five",
        "dist": 1.8790431022644043,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 8,
    "node_type": "const",
    "prompt": "I am thinking about adding a new feature to allow for the user's input, once it has been searched in the code graph, to show the user which nodes were added to the LLM's context window by processing the results of the RAG query and database in a visual code graph. Right now I'm considering how to best implement this, and I think a good place to start would be with outputting the results of the queries to the database as a json file that can be processed by another crate into the visual code graph. Set up a scaffolding that will mock this other visual graph crate, showing how it would be incorporated into our current event system.",
    "snippet_info": [
      {
        "name": "INNER_CONST",
        "dist": 1.80110764503479,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "doc_attr_const",
        "dist": 1.8224284648895264,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.8243677616119385,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.841559886932373,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 1.886785864830017,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.8906712532043457,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "EXPR_CONST",
        "dist": 1.9037526845932007,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 1.9222825765609741,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 1.931138038635254,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 8,
    "node_type": "enum",
    "prompt": "I am thinking about adding a new feature to allow for the user's input, once it has been searched in the code graph, to show the user which nodes were added to the LLM's context window by processing the results of the RAG query and database in a visual code graph. Right now I'm considering how to best implement this, and I think a good place to start would be with outputting the results of the queries to the database as a json file that can be processed by another crate into the visual code graph. Set up a scaffolding that will mock this other visual graph crate, showing how it would be incorporated into our current event system.",
    "snippet_info": [
      {
        "name": "JustWhereClause",
        "dist": 1.6776410341262817,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.6791880130767822,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.6910407543182373,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.6995887756347656,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.7573297023773193,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.7883639335632324,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.7952985763549805,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.8161637783050537,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.8425630331039429,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.8435592651367188,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 1.8604670763015747,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 1.890671730041504,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.8956185579299927,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 1.9417996406555176,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 2.1219210624694824,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 8,
    "node_type": "macro",
    "prompt": "I am thinking about adding a new feature to allow for the user's input, once it has been searched in the code graph, to show the user which nodes were added to the LLM's context window by processing the results of the RAG query and database in a visual code graph. Right now I'm considering how to best implement this, and I think a good place to start would be with outputting the results of the queries to the database as a json file that can be processed by another crate into the visual code graph. Set up a scaffolding that will mock this other visual graph crate, showing how it would be incorporated into our current event system.",
    "snippet_info": [
      {
        "name": "exported_macro",
        "dist": 1.7653100490570068,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.781724452972412,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 1.786578893661499,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 1.833585500717163,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 8,
    "node_type": "module",
    "prompt": "I am thinking about adding a new feature to allow for the user's input, once it has been searched in the code graph, to show the user which nodes were added to the LLM's context window by processing the results of the RAG query and database in a visual code graph. Right now I'm considering how to best implement this, and I think a good place to start would be with outputting the results of the queries to the database as a json file that can be processed by another crate into the visual code graph. Set up a scaffolding that will mock this other visual graph crate, showing how it would be incorporated into our current event system.",
    "snippet_info": [
      {
        "name": "inner_mod",
        "dist": 1.6754347085952759,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "inner",
        "dist": 1.7366883754730225,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.7685766220092773,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "imports",
        "dist": 1.7848087549209595,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "inner",
        "dist": 1.7850778102874756,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "inner",
        "dist": 1.8086897134780884,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "macros",
        "dist": 1.822091817855835,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "impls",
        "dist": 1.836696743965149,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "unions",
        "dist": 1.838524341583252,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "traits",
        "dist": 1.8559738397598267,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "nested_sub",
        "dist": 1.8807429075241089,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "structs",
        "dist": 1.8887946605682373,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "enums",
        "dist": 1.9172945022583008,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "sub_imports",
        "dist": 1.9201302528381348,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "const_static",
        "dist": 1.9384350776672363,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 8,
    "node_type": "static",
    "prompt": "I am thinking about adding a new feature to allow for the user's input, once it has been searched in the code graph, to show the user which nodes were added to the LLM's context window by processing the results of the RAG query and database in a visual code graph. Right now I'm considering how to best implement this, and I think a good place to start would be with outputting the results of the queries to the database as a json file that can be processed by another crate into the visual code graph. Set up a scaffolding that will mock this other visual graph crate, showing how it would be incorporated into our current event system.",
    "snippet_info": [
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 1.6288025379180908,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.8109279870986938,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.8633180856704712,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.887770414352417,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.8995509147644043,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 1.971099615097046,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 8,
    "node_type": "struct",
    "prompt": "I am thinking about adding a new feature to allow for the user's input, once it has been searched in the code graph, to show the user which nodes were added to the LLM's context window by processing the results of the RAG query and database in a visual code graph. Right now I'm considering how to best implement this, and I think a good place to start would be with outputting the results of the queries to the database as a json file that can be processed by another crate into the visual code graph. Set up a scaffolding that will mock this other visual graph crate, showing how it would be incorporated into our current event system.",
    "snippet_info": [
      {
        "name": "DocumentedStruct",
        "dist": 1.7316102981567383,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SampleStruct",
        "dist": 1.82716703414917,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "AttributedStruct",
        "dist": 1.8370399475097656,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.845228910446167,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "NestedItem",
        "dist": 1.8527836799621582,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "UnitStruct",
        "dist": 1.8810207843780518,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "Container",
        "dist": 1.8874869346618652,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "InnerStruct",
        "dist": 1.9142496585845947,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "GenericStruct",
        "dist": 1.9256911277770996,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "SubItem",
        "dist": 1.932446002960205,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "GenericStruct",
        "dist": 1.9522532224655151,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "TupleStruct",
        "dist": 1.9692720174789429,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "PrivateStruct",
        "dist": 1.9803353548049927,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.011613130569458,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 8,
    "node_type": "trait",
    "prompt": "I am thinking about adding a new feature to allow for the user's input, once it has been searched in the code graph, to show the user which nodes were added to the LLM's context window by processing the results of the RAG query and database in a visual code graph. Right now I'm considering how to best implement this, and I think a good place to start would be with outputting the results of the queries to the database as a json file that can be processed by another crate into the visual code graph. Set up a scaffolding that will mock this other visual graph crate, showing how it would be incorporated into our current event system.",
    "snippet_info": [
      {
        "name": "ComplexGenericTrait",
        "dist": 1.6320598125457764,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "CrateTrait",
        "dist": 1.7394897937774658,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(crate) trait CrateTrait {\n    fn crate_method(&self);\n}"
      },
      {
        "name": "AssocConstTrait",
        "dist": 1.7645877599716187,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "SuperGraphNodeTrait",
        "dist": 1.769054889678955,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }"
      },
      {
        "name": "AttributedTrait",
        "dist": 1.7882804870605469,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 1.807311773300171,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "DocumentedTrait",
        "dist": 1.8250529766082764,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "ExampleTrait",
        "dist": 1.8574349880218506,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "trait ExampleTrait {\n    /// An associated constant required by a trait.\n    const TRAIT_REQ_CONST: bool;\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.8891003131866455,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn process(&self, item: T) -> T;\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.8961237668991089,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.9017717838287354,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "LifetimeTrait",
        "dist": 1.9025061130523682,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait LifetimeTrait<'a> {\n    fn get_ref(&'a self) -> &'a str;\n}"
      },
      {
        "name": "InnerPublicTrait",
        "dist": 1.9088263511657715,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }"
      },
      {
        "name": "AssocTypeTrait",
        "dist": 1.9100279808044434,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeTrait {\n    type Output;\n    fn generate(&self) -> Self::Output;\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.9166603088378906,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 8,
    "node_type": "type_alias",
    "prompt": "I am thinking about adding a new feature to allow for the user's input, once it has been searched in the code graph, to show the user which nodes were added to the LLM's context window by processing the results of the RAG query and database in a visual code graph. Right now I'm considering how to best implement this, and I think a good place to start would be with outputting the results of the queries to the database as a json file that can be processed by another crate into the visual code graph. Set up a scaffolding that will mock this other visual graph crate, showing how it would be incorporated into our current event system.",
    "snippet_info": [
      {
        "name": "DisplayableContainer",
        "dist": 1.6677542924880981,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "CrateBuffer",
        "dist": 1.7304964065551758,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(crate) type CrateBuffer = Vec<u8>;"
      },
      {
        "name": "DynDrawable",
        "dist": 1.7812567949295044,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "GenericContainer",
        "dist": 1.7993178367614746,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type GenericContainer<T> = Vec<T>;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 1.8289216756820679,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "Mapping",
        "dist": 1.8409403562545776,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type Mapping<K, V> = std::collections::HashMap<K, V>;"
      },
      {
        "name": "OldId",
        "dist": 1.8472951650619507,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "ComplexGeneric",
        "dist": 1.8572012186050415,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      },
      {
        "name": "MutStrSlice",
        "dist": 1.8898996114730835,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "UseInner",
        "dist": 1.9158415794372559,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 1.9167239665985107,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "InnerSecret",
        "dist": 1.9216426610946655,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InnerSecret = bool;"
      },
      {
        "name": "OuterPoint",
        "dist": 1.9254144430160522,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      },
      {
        "name": "MyInt",
        "dist": 1.9319519996643066,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Type alias used in a constant.\ntype MyInt = i32;"
      },
      {
        "name": "InternalCounter",
        "dist": 1.939993143081665,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InternalCounter = i32;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 8,
    "node_type": "union",
    "prompt": "I am thinking about adding a new feature to allow for the user's input, once it has been searched in the code graph, to show the user which nodes were added to the LLM's context window by processing the results of the RAG query and database in a visual code graph. Right now I'm considering how to best implement this, and I think a good place to start would be with outputting the results of the queries to the database as a json file that can be processed by another crate into the visual code graph. Set up a scaffolding that will mock this other visual graph crate, showing how it would be incorporated into our current event system.",
    "snippet_info": [
      {
        "name": "GenericUnion",
        "dist": 1.7276146411895752,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 1.7526788711547852,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "SecretData",
        "dist": 1.7828118801116943,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "CrateUnion",
        "dist": 1.7950605154037476,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.8167582750320435,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.8760946989059448,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.8792253732681274,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "InnerSecret",
        "dist": 1.9153634309768677,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "ReprCUnion",
        "dist": 2.051661968231201,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 9,
    "node_type": "function",
    "prompt": "We need to add a way for the user to select files that they would want to add wholesale into the LLM context. Implement this feature along with tests, documentation, and list the files changed.",
    "snippet_info": [
      {
        "name": "use_imported_items",
        "dist": 1.3268277645111084,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "use_all_const_static",
        "dist": 1.7970830202102661,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.9104536771774292,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "five",
        "dist": 1.97250497341156,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 9,
    "node_type": "const",
    "prompt": "We need to add a way for the user to select files that they would want to add wholesale into the LLM context. Implement this feature along with tests, documentation, and list the files changed.",
    "snippet_info": [
      {
        "name": "doc_attr_const",
        "dist": 1.7315524816513062,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 1.9038974046707153,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.9223568439483643,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.9726426601409912,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 2.0037078857421875,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "INNER_CONST",
        "dist": 2.0106513500213623,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "EXPR_CONST",
        "dist": 2.068331241607666,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 2.0781266689300537,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 2.1403510570526123,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 9,
    "node_type": "enum",
    "prompt": "We need to add a way for the user to select files that they would want to add wholesale into the LLM context. Implement this feature along with tests, documentation, and list the files changed.",
    "snippet_info": [
      {
        "name": "OnlyStructVariants",
        "dist": 1.6327645778656006,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.6920459270477295,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.6924421787261963,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 1.78525972366333,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.802693486213684,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.814894199371338,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.8535903692245483,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.8763008117675781,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.8826754093170166,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 1.8837807178497314,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.9050310850143433,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.9061371088027954,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.9140591621398926,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 2.048461675643921,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 2.0939464569091797,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 9,
    "node_type": "macro",
    "prompt": "We need to add a way for the user to select files that they would want to add wholesale into the LLM context. Implement this feature along with tests, documentation, and list the files changed.",
    "snippet_info": [
      {
        "name": "exported_macro",
        "dist": 1.6734426021575928,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.7685542106628418,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 1.7856402397155762,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 1.9118118286132812,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 9,
    "node_type": "module",
    "prompt": "We need to add a way for the user to select files that they would want to add wholesale into the LLM context. Implement this feature along with tests, documentation, and list the files changed.",
    "snippet_info": [
      {
        "name": "sub_imports",
        "dist": 1.6724826097488403,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.7690527439117432,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.7739481925964355,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "inner_mod",
        "dist": 1.7911139726638794,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "imports",
        "dist": 1.8020719289779663,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "macros",
        "dist": 1.8476113080978394,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "nested_sub",
        "dist": 1.861525297164917,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "inner",
        "dist": 1.8786838054656982,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "impls",
        "dist": 1.9151228666305542,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "unions",
        "dist": 1.9257402420043945,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "traits",
        "dist": 1.9556446075439453,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "enums",
        "dist": 1.9629007577896118,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "inner",
        "dist": 1.9632271528244019,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "structs",
        "dist": 1.9998080730438232,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "const_static",
        "dist": 2.024019956588745,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 9,
    "node_type": "static",
    "prompt": "We need to add a way for the user to select files that they would want to add wholesale into the LLM context. Implement this feature along with tests, documentation, and list the files changed.",
    "snippet_info": [
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.6066843271255493,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.7650961875915527,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.8685927391052246,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 2.0450191497802734,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 2.109172821044922,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 2.1723852157592773,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 9,
    "node_type": "struct",
    "prompt": "We need to add a way for the user to select files that they would want to add wholesale into the LLM context. Implement this feature along with tests, documentation, and list the files changed.",
    "snippet_info": [
      {
        "name": "DocumentedStruct",
        "dist": 1.8261715173721313,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SubItem",
        "dist": 1.8795197010040283,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "UnitStruct",
        "dist": 1.8962777853012085,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "NestedItem",
        "dist": 1.9092128276824951,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "AttributedStruct",
        "dist": 1.9291208982467651,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 1.9318242073059082,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "SampleStruct",
        "dist": 1.9434459209442139,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 1.9468002319335938,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.9941599369049072,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "PrivateStruct",
        "dist": 1.994950294494629,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "Container",
        "dist": 2.0071728229522705,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "InnerStruct",
        "dist": 2.0238380432128906,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "TupleStruct",
        "dist": 2.096080780029297,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.1036441326141357,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 9,
    "node_type": "trait",
    "prompt": "We need to add a way for the user to select files that they would want to add wholesale into the LLM context. Implement this feature along with tests, documentation, and list the files changed.",
    "snippet_info": [
      {
        "name": "DocumentedTrait",
        "dist": 1.6926448345184326,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "ComplexGenericTrait",
        "dist": 1.7466602325439453,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.7646293640136719,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn process(&self, item: T) -> T;\n}"
      },
      {
        "name": "AttributedTrait",
        "dist": 1.7812137603759766,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "GenericSuperTrait",
        "dist": 1.793008804321289,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericSuperTrait<T>: GenericTrait<T> {\n    fn generic_super_method(&self, item: T);\n}"
      },
      {
        "name": "InternalTrait",
        "dist": 1.8076459169387817,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.809962511062622,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "MultiSuperTrait",
        "dist": 1.8154072761535645,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait MultiSuperTrait: SimpleTrait + InternalTrait + Debug {\n    fn multi_super_method(&self);\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.8916339874267578,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 1.8923429250717163,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "AssocConstTrait",
        "dist": 1.9007819890975952,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.9042452573776245,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "ExampleTrait",
        "dist": 1.9079030752182007,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "trait ExampleTrait {\n    /// An associated constant required by a trait.\n    const TRAIT_REQ_CONST: bool;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.9157629013061523,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "SuperTrait",
        "dist": 1.9227043390274048,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SuperTrait: SimpleTrait {\n    fn super_method(&self);\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 9,
    "node_type": "type_alias",
    "prompt": "We need to add a way for the user to select files that they would want to add wholesale into the LLM context. Implement this feature along with tests, documentation, and list the files changed.",
    "snippet_info": [
      {
        "name": "DisplayableContainer",
        "dist": 1.8024144172668457,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "GenericContainer",
        "dist": 1.810288667678833,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type GenericContainer<T> = Vec<T>;"
      },
      {
        "name": "DynDrawable",
        "dist": 1.8843495845794678,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "OldId",
        "dist": 1.8926318883895874,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "MutRawPtr",
        "dist": 1.968887448310852,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "MutStrSlice",
        "dist": 1.9934996366500854,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "ComplexGeneric",
        "dist": 2.0085577964782715,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      },
      {
        "name": "Mapping",
        "dist": 2.0317983627319336,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type Mapping<K, V> = std::collections::HashMap<K, V>;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 2.0596303939819336,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "InnerSecret",
        "dist": 2.0642170906066895,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InnerSecret = bool;"
      },
      {
        "name": "MyInt",
        "dist": 2.075137138366699,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Type alias used in a constant.\ntype MyInt = i32;"
      },
      {
        "name": "OuterPoint",
        "dist": 2.0834403038024902,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      },
      {
        "name": "InternalCounter",
        "dist": 2.085136890411377,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InternalCounter = i32;"
      },
      {
        "name": "UseInner",
        "dist": 2.088167190551758,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "InnerPublic",
        "dist": 2.1043879985809326,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type InnerPublic = f64;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 9,
    "node_type": "union",
    "prompt": "We need to add a way for the user to select files that they would want to add wholesale into the LLM context. Implement this feature along with tests, documentation, and list the files changed.",
    "snippet_info": [
      {
        "name": "GenericUnion",
        "dist": 1.6692652702331543,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.940924048423767,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 1.9661781787872314,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 2.00675106048584,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "IntOrFloat",
        "dist": 2.0151329040527344,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "SecretData",
        "dist": 2.050520181655884,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 2.124513626098633,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "CrateUnion",
        "dist": 2.1398978233337402,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "ReprCUnion",
        "dist": 2.175908327102661,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 10,
    "node_type": "function",
    "prompt": "We should handle the config more comprehensively. Let's expand the user config to provide more personalization for the tool, including colors, directory files and folders to replace the defaults, and other natural customization points both for functional changes and aesthetic changes the user might expect from a sophisticated tool.",
    "snippet_info": [
      {
        "name": "use_all_const_static",
        "dist": 1.7072259187698364,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "use_imported_items",
        "dist": 1.7777786254882812,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.8227076530456543,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "five",
        "dist": 1.8953185081481934,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 10,
    "node_type": "const",
    "prompt": "We should handle the config more comprehensively. Let's expand the user config to provide more personalization for the tool, including colors, directory files and folders to replace the defaults, and other natural customization points both for functional changes and aesthetic changes the user might expect from a sophisticated tool.",
    "snippet_info": [
      {
        "name": "doc_attr_const",
        "dist": 1.453324556350708,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 1.8094757795333862,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.8174066543579102,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.870615005493164,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.8710479736328125,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "INNER_CONST",
        "dist": 1.885047197341919,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 1.9048718214035034,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 1.9196285009384155,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "EXPR_CONST",
        "dist": 1.9261963367462158,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 10,
    "node_type": "enum",
    "prompt": "We should handle the config more comprehensively. Let's expand the user config to provide more personalization for the tool, including colors, directory files and folders to replace the defaults, and other natural customization points both for functional changes and aesthetic changes the user might expect from a sophisticated tool.",
    "snippet_info": [
      {
        "name": "OnlyStructVariants",
        "dist": 1.7173960208892822,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.7716702222824097,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.7823154926300049,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.8016728162765503,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.8033194541931152,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 1.8037034273147583,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.820734977722168,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.8236476182937622,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.8392525911331177,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.8833975791931152,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.9179885387420654,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.9864447116851807,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 1.9953227043151855,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 2.018301248550415,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 2.1064343452453613,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 10,
    "node_type": "macro",
    "prompt": "We should handle the config more comprehensively. Let's expand the user config to provide more personalization for the tool, including colors, directory files and folders to replace the defaults, and other natural customization points both for functional changes and aesthetic changes the user might expect from a sophisticated tool.",
    "snippet_info": [
      {
        "name": "attributed_macro",
        "dist": 1.6716692447662354,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.7173693180084229,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "exported_macro",
        "dist": 1.7321404218673706,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 1.8991787433624268,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 10,
    "node_type": "module",
    "prompt": "We should handle the config more comprehensively. Let's expand the user config to provide more personalization for the tool, including colors, directory files and folders to replace the defaults, and other natural customization points both for functional changes and aesthetic changes the user might expect from a sophisticated tool.",
    "snippet_info": [
      {
        "name": "macros",
        "dist": 1.746872067451477,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "const_static",
        "dist": 1.8076395988464355,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "inner_mod",
        "dist": 1.8121135234832764,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "traits",
        "dist": 1.8231295347213745,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "imports",
        "dist": 1.824108600616455,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "inner",
        "dist": 1.824984073638916,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.8329944610595703,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "structs",
        "dist": 1.885287880897522,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "impls",
        "dist": 1.8940367698669434,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "type_alias",
        "dist": 1.9091835021972656,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod type_alias;"
      },
      {
        "name": "enums",
        "dist": 1.9105470180511475,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "inner",
        "dist": 1.9514219760894775,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "unions",
        "dist": 1.9773244857788086,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "nested_sub",
        "dist": 1.9891078472137451,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "sub_imports",
        "dist": 2.0008742809295654,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 10,
    "node_type": "static",
    "prompt": "We should handle the config more comprehensively. Let's expand the user config to provide more personalization for the tool, including colors, directory files and folders to replace the defaults, and other natural customization points both for functional changes and aesthetic changes the user might expect from a sophisticated tool.",
    "snippet_info": [
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.498138427734375,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.73343026638031,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 1.9840588569641113,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.997233271598816,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 1.9996994733810425,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 2.0267670154571533,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 10,
    "node_type": "struct",
    "prompt": "We should handle the config more comprehensively. Let's expand the user config to provide more personalization for the tool, including colors, directory files and folders to replace the defaults, and other natural customization points both for functional changes and aesthetic changes the user might expect from a sophisticated tool.",
    "snippet_info": [
      {
        "name": "DocumentedStruct",
        "dist": 1.9024900197982788,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "PrivateStruct",
        "dist": 1.9916404485702515,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "UnitStruct",
        "dist": 2.0688304901123047,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.080927848815918,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "SubItem",
        "dist": 2.0971641540527344,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "AttributedStruct",
        "dist": 2.097738742828369,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "NestedItem",
        "dist": 2.102973461151123,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "GenericStruct",
        "dist": 2.111950635910034,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "InnerStruct",
        "dist": 2.1140236854553223,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "TupleStruct",
        "dist": 2.1255855560302734,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "Container",
        "dist": 2.128843307495117,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "SampleStruct",
        "dist": 2.142801284790039,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 2.155242443084717,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.1583285331726074,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 10,
    "node_type": "trait",
    "prompt": "We should handle the config more comprehensively. Let's expand the user config to provide more personalization for the tool, including colors, directory files and folders to replace the defaults, and other natural customization points both for functional changes and aesthetic changes the user might expect from a sophisticated tool.",
    "snippet_info": [
      {
        "name": "InternalTrait",
        "dist": 1.6319732666015625,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      },
      {
        "name": "DocumentedTrait",
        "dist": 1.7696938514709473,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.8362188339233398,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "SuperGraphNodeTrait",
        "dist": 1.8607304096221924,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }"
      },
      {
        "name": "MultiSuperTrait",
        "dist": 1.8612711429595947,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait MultiSuperTrait: SimpleTrait + InternalTrait + Debug {\n    fn multi_super_method(&self);\n}"
      },
      {
        "name": "PrivateTrait",
        "dist": 1.8774914741516113,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "trait PrivateTrait {\n    fn private_trait_method(&self);\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.8852344751358032,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait SimpleTrait {\n    fn trait_method(&self) -> i32;\n}"
      },
      {
        "name": "SuperTrait",
        "dist": 1.8857210874557495,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SuperTrait: SimpleTrait {\n    fn super_method(&self);\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.8900043964385986,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "ExampleTrait",
        "dist": 1.9206018447875977,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "trait ExampleTrait {\n    /// An associated constant required by a trait.\n    const TRAIT_REQ_CONST: bool;\n}"
      },
      {
        "name": "AttributedTrait",
        "dist": 1.9403631687164307,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "UnsafeTrait",
        "dist": 1.9588909149169922,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub unsafe trait UnsafeTrait {\n    unsafe fn unsafe_method(&self);\n}"
      },
      {
        "name": "InnerPublicTrait",
        "dist": 1.978546380996704,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.9812686443328857,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "GenericSuperTrait",
        "dist": 1.9933979511260986,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericSuperTrait<T>: GenericTrait<T> {\n    fn generic_super_method(&self, item: T);\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 10,
    "node_type": "type_alias",
    "prompt": "We should handle the config more comprehensively. Let's expand the user config to provide more personalization for the tool, including colors, directory files and folders to replace the defaults, and other natural customization points both for functional changes and aesthetic changes the user might expect from a sophisticated tool.",
    "snippet_info": [
      {
        "name": "DisplayableContainer",
        "dist": 1.8611756563186646,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "ConstRawPtr",
        "dist": 1.9081065654754639,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type ConstRawPtr = *const u8;"
      },
      {
        "name": "OldId",
        "dist": 1.911636233329773,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 1.9302862882614136,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "UseInner",
        "dist": 1.9791115522384644,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "SimpleId",
        "dist": 1.990247130393982,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type SimpleId = u64;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 1.9955129623413086,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "MyInt",
        "dist": 2.000093936920166,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Type alias used in a constant.\ntype MyInt = i32;"
      },
      {
        "name": "ComplexGeneric",
        "dist": 2.0090770721435547,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      },
      {
        "name": "OuterPoint",
        "dist": 2.021055221557617,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      },
      {
        "name": "Point",
        "dist": 2.0268208980560303,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "/// Documented public alias for a tuple type\npub type Point = (i32, i32);"
      },
      {
        "name": "IdAlias",
        "dist": 2.0695090293884277,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type IdAlias = SimpleId;"
      },
      {
        "name": "InnerPublic",
        "dist": 2.0736773014068604,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type InnerPublic = f64;"
      },
      {
        "name": "MutRawPtr",
        "dist": 2.077636957168579,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "Mapping",
        "dist": 2.085646867752075,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type Mapping<K, V> = std::collections::HashMap<K, V>;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 10,
    "node_type": "union",
    "prompt": "We should handle the config more comprehensively. Let's expand the user config to provide more personalization for the tool, including colors, directory files and folders to replace the defaults, and other natural customization points both for functional changes and aesthetic changes the user might expect from a sophisticated tool.",
    "snippet_info": [
      {
        "name": "GenericUnion",
        "dist": 2.0385448932647705,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 2.0668389797210693,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "IntOrFloat",
        "dist": 2.0772688388824463,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 2.106952428817749,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "SecretData",
        "dist": 2.109821319580078,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 2.151658058166504,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "CrateUnion",
        "dist": 2.1656265258789062,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 2.2108514308929443,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "ReprCUnion",
        "dist": 2.2124581336975098,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 11,
    "node_type": "function",
    "prompt": "We want to add a way for a message in the chat history to change with new events and updates. For example, if we want a message to display some ongoing changes, like the different phases of a process, we could add a message and then continue to update that message as the process went from starting to finishing.",
    "snippet_info": [
      {
        "name": "use_imported_items",
        "dist": 1.8782881498336792,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.9316686391830444,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "five",
        "dist": 1.9929735660552979,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      },
      {
        "name": "use_all_const_static",
        "dist": 2.0244152545928955,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 11,
    "node_type": "const",
    "prompt": "We want to add a way for a message in the chat history to change with new events and updates. For example, if we want a message to display some ongoing changes, like the different phases of a process, we could add a message and then continue to update that message as the process went from starting to finishing.",
    "snippet_info": [
      {
        "name": "INNER_CONST",
        "dist": 1.9244053363800049,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.9380121231079102,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 2.015230894088745,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 2.0219318866729736,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "doc_attr_const",
        "dist": 2.0288922786712646,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 2.0344507694244385,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "EXPR_CONST",
        "dist": 2.0367677211761475,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 2.056870460510254,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 2.1064467430114746,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 11,
    "node_type": "enum",
    "prompt": "We want to add a way for a message in the chat history to change with new events and updates. For example, if we want a message to display some ongoing changes, like the different phases of a process, we could add a message and then continue to update that message as the process went from starting to finishing.",
    "snippet_info": [
      {
        "name": "CrateEnum",
        "dist": 1.8084523677825928,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 1.875877022743225,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.9037209749221802,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.9270429611206055,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.930757761001587,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.9319727420806885,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.9361581802368164,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.9374783039093018,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.9487278461456299,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 1.9504034519195557,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 1.9556419849395752,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.9633634090423584,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.9653223752975464,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 2.012321710586548,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 2.066948652267456,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 11,
    "node_type": "macro",
    "prompt": "We want to add a way for a message in the chat history to change with new events and updates. For example, if we want a message to display some ongoing changes, like the different phases of a process, we could add a message and then continue to update that message as the process went from starting to finishing.",
    "snippet_info": [
      {
        "name": "documented_macro",
        "dist": 1.8399829864501953,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "exported_macro",
        "dist": 2.0027172565460205,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 2.0507612228393555,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 2.075988292694092,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 11,
    "node_type": "module",
    "prompt": "We want to add a way for a message in the chat history to change with new events and updates. For example, if we want a message to display some ongoing changes, like the different phases of a process, we could add a message and then continue to update that message as the process went from starting to finishing.",
    "snippet_info": [
      {
        "name": "unions",
        "dist": 1.736469030380249,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "macros",
        "dist": 1.7370307445526123,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "enums",
        "dist": 1.7435693740844727,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "nested_sub",
        "dist": 1.7456610202789307,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "impls",
        "dist": 1.7863832712173462,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "const_static",
        "dist": 1.8361239433288574,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "imports",
        "dist": 1.855769157409668,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "inner",
        "dist": 1.855966567993164,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "structs",
        "dist": 1.8628418445587158,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "sub_imports",
        "dist": 1.8732770681381226,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "traits",
        "dist": 1.8836733102798462,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "inner_mod",
        "dist": 1.8839545249938965,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "type_alias",
        "dist": 1.8839983940124512,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod type_alias;"
      },
      {
        "name": "inner",
        "dist": 1.9683043956756592,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "inner",
        "dist": 2.0232207775115967,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 11,
    "node_type": "static",
    "prompt": "We want to add a way for a message in the chat history to change with new events and updates. For example, if we want a message to display some ongoing changes, like the different phases of a process, we could add a message and then continue to update that message as the process went from starting to finishing.",
    "snippet_info": [
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.9042359590530396,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.925422191619873,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 1.9482163190841675,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.9748073816299438,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 2.0689167976379395,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 2.1009175777435303,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 11,
    "node_type": "struct",
    "prompt": "We want to add a way for a message in the chat history to change with new events and updates. For example, if we want a message to display some ongoing changes, like the different phases of a process, we could add a message and then continue to update that message as the process went from starting to finishing.",
    "snippet_info": [
      {
        "name": "DocumentedStruct",
        "dist": 1.7656166553497314,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "NestedItem",
        "dist": 1.773385763168335,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "SubItem",
        "dist": 1.7791523933410645,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "GenericStruct",
        "dist": 1.8052277565002441,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 1.8218156099319458,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "AttributedStruct",
        "dist": 1.8546903133392334,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SampleStruct",
        "dist": 1.8694097995758057,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "TupleStruct",
        "dist": 1.8828433752059937,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "InnerStruct",
        "dist": 1.8946473598480225,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "UnitStruct",
        "dist": 1.9107017517089844,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.9200949668884277,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "Container",
        "dist": 1.931973934173584,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "PrivateStruct",
        "dist": 2.0551857948303223,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.155413866043091,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 11,
    "node_type": "trait",
    "prompt": "We want to add a way for a message in the chat history to change with new events and updates. For example, if we want a message to display some ongoing changes, like the different phases of a process, we could add a message and then continue to update that message as the process went from starting to finishing.",
    "snippet_info": [
      {
        "name": "ComplexGenericTrait",
        "dist": 1.716586947441101,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "CrateTrait",
        "dist": 1.849623680114746,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(crate) trait CrateTrait {\n    fn crate_method(&self);\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.8587167263031006,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn process(&self, item: T) -> T;\n}"
      },
      {
        "name": "LifetimeTrait",
        "dist": 1.9235234260559082,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait LifetimeTrait<'a> {\n    fn get_ref(&'a self) -> &'a str;\n}"
      },
      {
        "name": "AssocConstTrait",
        "dist": 1.950697422027588,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "AssocTypeTrait",
        "dist": 1.9517996311187744,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeTrait {\n    type Output;\n    fn generate(&self) -> Self::Output;\n}"
      },
      {
        "name": "InnerPublicTrait",
        "dist": 1.9534873962402344,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }"
      },
      {
        "name": "AssocTrait",
        "dist": 1.9547853469848633,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.9665286540985107,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.9842158555984497,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.985874891281128,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait SimpleTrait {\n    fn trait_method(&self) -> i32;\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 2.001474380493164,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn generic_trait_method(&self, value: T);\n}"
      },
      {
        "name": "GenericSuperTrait",
        "dist": 2.003450632095337,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericSuperTrait<T>: GenericTrait<T> {\n    fn generic_super_method(&self, item: T);\n}"
      },
      {
        "name": "InnerSecretTrait",
        "dist": 2.0055618286132812,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InnerSecretTrait {\n        fn secret_op(&self);\n    }"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 2.0056893825531006,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 11,
    "node_type": "type_alias",
    "prompt": "We want to add a way for a message in the chat history to change with new events and updates. For example, if we want a message to display some ongoing changes, like the different phases of a process, we could add a message and then continue to update that message as the process went from starting to finishing.",
    "snippet_info": [
      {
        "name": "OldId",
        "dist": 1.6654698848724365,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "CrateBuffer",
        "dist": 1.7170531749725342,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(crate) type CrateBuffer = Vec<u8>;"
      },
      {
        "name": "ComplexGeneric",
        "dist": 1.801832914352417,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      },
      {
        "name": "InnerSecret",
        "dist": 1.8033549785614014,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InnerSecret = bool;"
      },
      {
        "name": "InnerPublic",
        "dist": 1.8281223773956299,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type InnerPublic = f64;"
      },
      {
        "name": "MutStrSlice",
        "dist": 1.8527384996414185,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "StrSlice",
        "dist": 1.8651248216629028,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type StrSlice<'a> = &'a str;"
      },
      {
        "name": "MutRawPtr",
        "dist": 1.901336431503296,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "DynDrawable",
        "dist": 1.9058266878128052,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 1.9062353372573853,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "ByteArray",
        "dist": 1.9067258834838867,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ByteArray = [u8; 256];"
      },
      {
        "name": "UseInner",
        "dist": 1.911158561706543,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "SimpleId",
        "dist": 1.9297363758087158,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type SimpleId = u64;"
      },
      {
        "name": "OuterPoint",
        "dist": 1.9337892532348633,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      },
      {
        "name": "GenericContainer",
        "dist": 1.935701847076416,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type GenericContainer<T> = Vec<T>;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 11,
    "node_type": "union",
    "prompt": "We want to add a way for a message in the chat history to change with new events and updates. For example, if we want a message to display some ongoing changes, like the different phases of a process, we could add a message and then continue to update that message as the process went from starting to finishing.",
    "snippet_info": [
      {
        "name": "CrateUnion",
        "dist": 1.7760100364685059,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 1.8446776866912842,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "InnerPublic",
        "dist": 1.854292392730713,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.8911967277526855,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "SecretData",
        "dist": 1.8953949213027954,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 1.9005122184753418,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "GenericUnion",
        "dist": 1.969018578529358,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 2.085200309753418,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "ReprCUnion",
        "dist": 2.086252212524414,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 12,
    "node_type": "function",
    "prompt": "We want to add a way for the user to see the retrieved context that is being included in the LLM's context window to give them some insight into what the LLM has access to while trying to answer their questions. However, we don't want to clutter up the UI with a wall of text that shows all the returned snippets. Let's add a small indicator that invites the user to click on it, perhaps with a changing color and changing text that shows the files being prcoessed or used by the LLM, and that if they select and click on it, it will expand to show more information about the item being returned by the RAG, such as the names and a short summary of the item.",
    "snippet_info": [
      {
        "name": "use_imported_items",
        "dist": 1.5548515319824219,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "use_all_const_static",
        "dist": 1.5933510065078735,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.8512096405029297,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "five",
        "dist": 1.8807642459869385,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 12,
    "node_type": "const",
    "prompt": "We want to add a way for the user to see the retrieved context that is being included in the LLM's context window to give them some insight into what the LLM has access to while trying to answer their questions. However, we don't want to clutter up the UI with a wall of text that shows all the returned snippets. Let's add a small indicator that invites the user to click on it, perhaps with a changing color and changing text that shows the files being prcoessed or used by the LLM, and that if they select and click on it, it will expand to show more information about the item being returned by the RAG, such as the names and a short summary of the item.",
    "snippet_info": [
      {
        "name": "doc_attr_const",
        "dist": 1.6173405647277832,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 1.8086698055267334,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "INNER_CONST",
        "dist": 1.8500990867614746,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.8614977598190308,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "EXPR_CONST",
        "dist": 1.8776307106018066,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.8826003074645996,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.9146783351898193,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 1.9751816987991333,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 1.9817721843719482,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 12,
    "node_type": "enum",
    "prompt": "We want to add a way for the user to see the retrieved context that is being included in the LLM's context window to give them some insight into what the LLM has access to while trying to answer their questions. However, we don't want to clutter up the UI with a wall of text that shows all the returned snippets. Let's add a small indicator that invites the user to click on it, perhaps with a changing color and changing text that shows the files being prcoessed or used by the LLM, and that if they select and click on it, it will expand to show more information about the item being returned by the RAG, such as the names and a short summary of the item.",
    "snippet_info": [
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.6496033668518066,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 1.7070269584655762,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.7579926252365112,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.771186113357544,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.7870299816131592,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.7974927425384521,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.809370517730713,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.825787901878357,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.8280116319656372,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.8427895307540894,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.860031008720398,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 1.8721743822097778,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 1.9100991487503052,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 1.9163970947265625,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.9199800491333008,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 12,
    "node_type": "macro",
    "prompt": "We want to add a way for the user to see the retrieved context that is being included in the LLM's context window to give them some insight into what the LLM has access to while trying to answer their questions. However, we don't want to clutter up the UI with a wall of text that shows all the returned snippets. Let's add a small indicator that invites the user to click on it, perhaps with a changing color and changing text that shows the files being prcoessed or used by the LLM, and that if they select and click on it, it will expand to show more information about the item being returned by the RAG, such as the names and a short summary of the item.",
    "snippet_info": [
      {
        "name": "attributed_macro",
        "dist": 1.6145128011703491,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.6619361639022827,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "exported_macro",
        "dist": 1.720441460609436,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 1.8185105323791504,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 12,
    "node_type": "module",
    "prompt": "We want to add a way for the user to see the retrieved context that is being included in the LLM's context window to give them some insight into what the LLM has access to while trying to answer their questions. However, we don't want to clutter up the UI with a wall of text that shows all the returned snippets. Let's add a small indicator that invites the user to click on it, perhaps with a changing color and changing text that shows the files being prcoessed or used by the LLM, and that if they select and click on it, it will expand to show more information about the item being returned by the RAG, such as the names and a short summary of the item.",
    "snippet_info": [
      {
        "name": "inner_mod",
        "dist": 1.6619714498519897,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "inner",
        "dist": 1.7475732564926147,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "macros",
        "dist": 1.7517012357711792,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "imports",
        "dist": 1.7825288772583008,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "inner",
        "dist": 1.7982395887374878,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "enums",
        "dist": 1.8071900606155396,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "inner",
        "dist": 1.8131351470947266,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "impls",
        "dist": 1.8357596397399902,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "structs",
        "dist": 1.8387935161590576,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "traits",
        "dist": 1.844379186630249,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "inner",
        "dist": 1.8961387872695923,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "unions",
        "dist": 1.90097177028656,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "sub_imports",
        "dist": 1.9138877391815186,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "nested_sub",
        "dist": 1.9187242984771729,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "const_static",
        "dist": 1.9189761877059937,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 12,
    "node_type": "static",
    "prompt": "We want to add a way for the user to see the retrieved context that is being included in the LLM's context window to give them some insight into what the LLM has access to while trying to answer their questions. However, we don't want to clutter up the UI with a wall of text that shows all the returned snippets. Let's add a small indicator that invites the user to click on it, perhaps with a changing color and changing text that shows the files being prcoessed or used by the LLM, and that if they select and click on it, it will expand to show more information about the item being returned by the RAG, such as the names and a short summary of the item.",
    "snippet_info": [
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 1.6285178661346436,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.6755095720291138,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.7327042818069458,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.8259179592132568,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.853391170501709,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 2.0073134899139404,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 12,
    "node_type": "struct",
    "prompt": "We want to add a way for the user to see the retrieved context that is being included in the LLM's context window to give them some insight into what the LLM has access to while trying to answer their questions. However, we don't want to clutter up the UI with a wall of text that shows all the returned snippets. Let's add a small indicator that invites the user to click on it, perhaps with a changing color and changing text that shows the files being prcoessed or used by the LLM, and that if they select and click on it, it will expand to show more information about the item being returned by the RAG, such as the names and a short summary of the item.",
    "snippet_info": [
      {
        "name": "DocumentedStruct",
        "dist": 1.6140599250793457,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "AttributedStruct",
        "dist": 1.6976128816604614,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SubItem",
        "dist": 1.8059334754943848,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "NestedItem",
        "dist": 1.8085789680480957,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "UnitStruct",
        "dist": 1.8147482872009277,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.8207628726959229,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "SampleStruct",
        "dist": 1.8222625255584717,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "Container",
        "dist": 1.8335505723953247,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "PrivateStruct",
        "dist": 1.8362884521484375,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 1.8432567119598389,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "InnerStruct",
        "dist": 1.89043390750885,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "GenericStruct",
        "dist": 1.916363000869751,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "TupleStruct",
        "dist": 1.941650629043579,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.048125982284546,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 12,
    "node_type": "trait",
    "prompt": "We want to add a way for the user to see the retrieved context that is being included in the LLM's context window to give them some insight into what the LLM has access to while trying to answer their questions. However, we don't want to clutter up the UI with a wall of text that shows all the returned snippets. Let's add a small indicator that invites the user to click on it, perhaps with a changing color and changing text that shows the files being prcoessed or used by the LLM, and that if they select and click on it, it will expand to show more information about the item being returned by the RAG, such as the names and a short summary of the item.",
    "snippet_info": [
      {
        "name": "ComplexGenericTrait",
        "dist": 1.7721972465515137,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "AttributedTrait",
        "dist": 1.8044569492340088,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "LifetimeTrait",
        "dist": 1.8153308629989624,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait LifetimeTrait<'a> {\n    fn get_ref(&'a self) -> &'a str;\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.8266406059265137,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn process(&self, item: T) -> T;\n}"
      },
      {
        "name": "InnerPublicTrait",
        "dist": 1.8588210344314575,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }"
      },
      {
        "name": "DocumentedTrait",
        "dist": 1.860729694366455,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "AssocConstTrait",
        "dist": 1.8678182363510132,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.8715317249298096,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "GenericSuperTrait",
        "dist": 1.8716427087783813,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericSuperTrait<T>: GenericTrait<T> {\n    fn generic_super_method(&self, item: T);\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.8747150897979736,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait SimpleTrait {\n    fn trait_method(&self) -> i32;\n}"
      },
      {
        "name": "PrivateTrait",
        "dist": 1.8824230432510376,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "trait PrivateTrait {\n    fn private_trait_method(&self);\n}"
      },
      {
        "name": "CrateTrait",
        "dist": 1.8826439380645752,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(crate) trait CrateTrait {\n    fn crate_method(&self);\n}"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.8881757259368896,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.8883885145187378,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "SuperGraphNodeTrait",
        "dist": 1.8944095373153687,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 12,
    "node_type": "type_alias",
    "prompt": "We want to add a way for the user to see the retrieved context that is being included in the LLM's context window to give them some insight into what the LLM has access to while trying to answer their questions. However, we don't want to clutter up the UI with a wall of text that shows all the returned snippets. Let's add a small indicator that invites the user to click on it, perhaps with a changing color and changing text that shows the files being prcoessed or used by the LLM, and that if they select and click on it, it will expand to show more information about the item being returned by the RAG, such as the names and a short summary of the item.",
    "snippet_info": [
      {
        "name": "DisplayableContainer",
        "dist": 1.6008415222167969,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "GenericContainer",
        "dist": 1.7258319854736328,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type GenericContainer<T> = Vec<T>;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 1.7601091861724854,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "MutStrSlice",
        "dist": 1.8076344728469849,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "MutRawPtr",
        "dist": 1.8390213251113892,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "UseInner",
        "dist": 1.8522143363952637,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "DynDrawable",
        "dist": 1.8547658920288086,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "CrateBuffer",
        "dist": 1.8639953136444092,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(crate) type CrateBuffer = Vec<u8>;"
      },
      {
        "name": "OldId",
        "dist": 1.8751624822616577,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "InternalCounter",
        "dist": 1.914257287979126,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InternalCounter = i32;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 1.9196408987045288,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "InnerPublic",
        "dist": 1.921694278717041,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type InnerPublic = f64;"
      },
      {
        "name": "OuterPoint",
        "dist": 1.929443359375,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      },
      {
        "name": "ByteArray",
        "dist": 1.942455768585205,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ByteArray = [u8; 256];"
      },
      {
        "name": "SimpleId",
        "dist": 1.9458889961242676,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type SimpleId = u64;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 12,
    "node_type": "union",
    "prompt": "We want to add a way for the user to see the retrieved context that is being included in the LLM's context window to give them some insight into what the LLM has access to while trying to answer their questions. However, we don't want to clutter up the UI with a wall of text that shows all the returned snippets. Let's add a small indicator that invites the user to click on it, perhaps with a changing color and changing text that shows the files being prcoessed or used by the LLM, and that if they select and click on it, it will expand to show more information about the item being returned by the RAG, such as the names and a short summary of the item.",
    "snippet_info": [
      {
        "name": "GenericUnion",
        "dist": 1.746448040008545,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.8788166046142578,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.8808670043945312,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "SecretData",
        "dist": 1.8959946632385254,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 1.915116786956787,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.9262322187423706,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "InnerSecret",
        "dist": 1.9693844318389893,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "CrateUnion",
        "dist": 2.0089657306671143,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "ReprCUnion",
        "dist": 2.1334376335144043,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 13,
    "node_type": "function",
    "prompt": "So far we are not really processing the code returned in the LLM responses very well - they are usually being returned by the LLM within markdown ticks and we should start formatting those with syntax highlighting. Implement this feature.",
    "snippet_info": [
      {
        "name": "use_all_const_static",
        "dist": 1.6564439535140991,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "use_imported_items",
        "dist": 1.7778801918029785,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "five",
        "dist": 1.9127732515335083,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.9496097564697266,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 13,
    "node_type": "const",
    "prompt": "So far we are not really processing the code returned in the LLM responses very well - they are usually being returned by the LLM within markdown ticks and we should start formatting those with syntax highlighting. Implement this feature.",
    "snippet_info": [
      {
        "name": "doc_attr_const",
        "dist": 1.6482980251312256,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 1.7986249923706055,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 1.8550945520401,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "EXPR_CONST",
        "dist": 1.8882184028625488,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 1.8882839679718018,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "INNER_CONST",
        "dist": 1.9014556407928467,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.9027130603790283,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.9486806392669678,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.9590647220611572,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 13,
    "node_type": "enum",
    "prompt": "So far we are not really processing the code returned in the LLM responses very well - they are usually being returned by the LLM within markdown ticks and we should start formatting those with syntax highlighting. Implement this feature.",
    "snippet_info": [
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.4824227094650269,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.7077677249908447,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 1.7140562534332275,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.7150170803070068,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.7253998517990112,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.7633860111236572,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.7685703039169312,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.7737467288970947,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.7855931520462036,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.8054919242858887,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.832127571105957,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.8360028266906738,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 1.850135087966919,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 1.8637006282806396,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 1.9568101167678833,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 13,
    "node_type": "macro",
    "prompt": "So far we are not really processing the code returned in the LLM responses very well - they are usually being returned by the LLM within markdown ticks and we should start formatting those with syntax highlighting. Implement this feature.",
    "snippet_info": [
      {
        "name": "documented_macro",
        "dist": 1.5646226406097412,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 1.6196725368499756,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "exported_macro",
        "dist": 1.6625556945800781,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 1.8405086994171143,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 13,
    "node_type": "module",
    "prompt": "So far we are not really processing the code returned in the LLM responses very well - they are usually being returned by the LLM within markdown ticks and we should start formatting those with syntax highlighting. Implement this feature.",
    "snippet_info": [
      {
        "name": "inner_mod",
        "dist": 1.6412835121154785,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "inner",
        "dist": 1.75480055809021,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "macros",
        "dist": 1.7808711528778076,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "inner",
        "dist": 1.7983312606811523,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "nested_sub",
        "dist": 1.8034510612487793,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "imports",
        "dist": 1.8098251819610596,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "impls",
        "dist": 1.8193471431732178,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "structs",
        "dist": 1.835207462310791,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "traits",
        "dist": 1.8450045585632324,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "inner",
        "dist": 1.8480453491210938,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "enums",
        "dist": 1.8565220832824707,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "inner",
        "dist": 1.8691790103912354,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "const_static",
        "dist": 1.8773064613342285,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "unions",
        "dist": 1.8870012760162354,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "type_alias",
        "dist": 1.914741039276123,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod type_alias;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 13,
    "node_type": "static",
    "prompt": "So far we are not really processing the code returned in the LLM responses very well - they are usually being returned by the LLM within markdown ticks and we should start formatting those with syntax highlighting. Implement this feature.",
    "snippet_info": [
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 1.5919420719146729,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.6129052639007568,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.6273086071014404,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.6488685607910156,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.6686323881149292,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 1.8061354160308838,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 13,
    "node_type": "struct",
    "prompt": "So far we are not really processing the code returned in the LLM responses very well - they are usually being returned by the LLM within markdown ticks and we should start formatting those with syntax highlighting. Implement this feature.",
    "snippet_info": [
      {
        "name": "DocumentedStruct",
        "dist": 1.6844922304153442,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "AttributedStruct",
        "dist": 1.701911449432373,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SampleStruct",
        "dist": 1.7647008895874023,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SubItem",
        "dist": 1.7856135368347168,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "NestedItem",
        "dist": 1.7962141036987305,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "UnitStruct",
        "dist": 1.8150272369384766,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.8365108966827393,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "PrivateStruct",
        "dist": 1.8394054174423218,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 1.848042607307434,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "TupleStruct",
        "dist": 1.896838665008545,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "GenericStruct",
        "dist": 1.899459958076477,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "InnerStruct",
        "dist": 1.915008544921875,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "Container",
        "dist": 1.9387919902801514,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.9521067142486572,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 13,
    "node_type": "trait",
    "prompt": "So far we are not really processing the code returned in the LLM responses very well - they are usually being returned by the LLM within markdown ticks and we should start formatting those with syntax highlighting. Implement this feature.",
    "snippet_info": [
      {
        "name": "AttributedTrait",
        "dist": 1.6517305374145508,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "DocumentedTrait",
        "dist": 1.7036151885986328,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "AssocTypeTrait",
        "dist": 1.751544713973999,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeTrait {\n    type Output;\n    fn generate(&self) -> Self::Output;\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 1.8023874759674072,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "CrateTrait",
        "dist": 1.8039299249649048,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(crate) trait CrateTrait {\n    fn crate_method(&self);\n}"
      },
      {
        "name": "LifetimeTrait",
        "dist": 1.8042250871658325,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait LifetimeTrait<'a> {\n    fn get_ref(&'a self) -> &'a str;\n}"
      },
      {
        "name": "ComplexGenericTrait",
        "dist": 1.8052005767822266,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.8178104162216187,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait SimpleTrait {\n    fn trait_method(&self) -> i32;\n}"
      },
      {
        "name": "InternalTrait",
        "dist": 1.8227112293243408,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.8342198133468628,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn process(&self, item: T) -> T;\n}"
      },
      {
        "name": "UnsafeTrait",
        "dist": 1.8353849649429321,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub unsafe trait UnsafeTrait {\n    unsafe fn unsafe_method(&self);\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.8386629819869995,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.8593738079071045,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "InnerSecretTrait",
        "dist": 1.8637348413467407,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InnerSecretTrait {\n        fn secret_op(&self);\n    }"
      },
      {
        "name": "AssocConstTrait",
        "dist": 1.8689332008361816,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 13,
    "node_type": "type_alias",
    "prompt": "So far we are not really processing the code returned in the LLM responses very well - they are usually being returned by the LLM within markdown ticks and we should start formatting those with syntax highlighting. Implement this feature.",
    "snippet_info": [
      {
        "name": "MutStrSlice",
        "dist": 1.636726975440979,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "DisplayableContainer",
        "dist": 1.637824296951294,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "GenericContainer",
        "dist": 1.7154433727264404,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type GenericContainer<T> = Vec<T>;"
      },
      {
        "name": "MutRawPtr",
        "dist": 1.720357894897461,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "CrateBuffer",
        "dist": 1.732488989830017,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(crate) type CrateBuffer = Vec<u8>;"
      },
      {
        "name": "DynDrawable",
        "dist": 1.7449092864990234,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "ComplexGeneric",
        "dist": 1.7684519290924072,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      },
      {
        "name": "StrSlice",
        "dist": 1.770941972732544,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type StrSlice<'a> = &'a str;"
      },
      {
        "name": "ByteArray",
        "dist": 1.7990732192993164,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ByteArray = [u8; 256];"
      },
      {
        "name": "OldId",
        "dist": 1.8103930950164795,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "InnerPublic",
        "dist": 1.8269078731536865,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type InnerPublic = f64;"
      },
      {
        "name": "UseInner",
        "dist": 1.8320417404174805,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "IdAlias",
        "dist": 1.8454570770263672,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type IdAlias = SimpleId;"
      },
      {
        "name": "SimpleId",
        "dist": 1.8542567491531372,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type SimpleId = u64;"
      },
      {
        "name": "ConstRawPtr",
        "dist": 1.8678807020187378,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type ConstRawPtr = *const u8;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 13,
    "node_type": "union",
    "prompt": "So far we are not really processing the code returned in the LLM responses very well - they are usually being returned by the LLM within markdown ticks and we should start formatting those with syntax highlighting. Implement this feature.",
    "snippet_info": [
      {
        "name": "GenericUnion",
        "dist": 1.5907299518585205,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 1.7154512405395508,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "CrateUnion",
        "dist": 1.7645595073699951,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.7695391178131104,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "SecretData",
        "dist": 1.8087373971939087,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.823242425918579,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.8374770879745483,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 1.909653663635254,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "ReprCUnion",
        "dist": 1.9783048629760742,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 14,
    "node_type": "function",
    "prompt": "What is the overall flow of the vector embedding process, beginning with startup and ending with the database being embedded with hnsw indexed values?",
    "snippet_info": [
      {
        "name": "use_imported_items",
        "dist": 1.6268994808197021,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "use_all_const_static",
        "dist": 1.6768982410430908,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.7525473833084106,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "five",
        "dist": 1.8791147470474243,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 14,
    "node_type": "const",
    "prompt": "What is the overall flow of the vector embedding process, beginning with startup and ending with the database being embedded with hnsw indexed values?",
    "snippet_info": [
      {
        "name": "doc_attr_const",
        "dist": 1.7511543035507202,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.806580662727356,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "INNER_CONST",
        "dist": 1.8233246803283691,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.824097990989685,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.826283574104309,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 1.9038136005401611,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 1.9539724588394165,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 2.036452293395996,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "EXPR_CONST",
        "dist": 2.1765542030334473,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 14,
    "node_type": "enum",
    "prompt": "What is the overall flow of the vector embedding process, beginning with startup and ending with the database being embedded with hnsw indexed values?",
    "snippet_info": [
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.7509427070617676,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.768178939819336,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.8013737201690674,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.8039371967315674,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.8082221746444702,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.8195953369140625,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.83925461769104,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.858627200126648,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.8641806840896606,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.8714615106582642,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 1.8933053016662598,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 1.9071776866912842,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.930030107498169,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 2.0029349327087402,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 2.083052158355713,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 14,
    "node_type": "macro",
    "prompt": "What is the overall flow of the vector embedding process, beginning with startup and ending with the database being embedded with hnsw indexed values?",
    "snippet_info": [
      {
        "name": "exported_macro",
        "dist": 1.793312907218933,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.8277478218078613,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 1.9264872074127197,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 2.0847067832946777,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 14,
    "node_type": "module",
    "prompt": "What is the overall flow of the vector embedding process, beginning with startup and ending with the database being embedded with hnsw indexed values?",
    "snippet_info": [
      {
        "name": "sub_imports",
        "dist": 1.7508131265640259,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.8173640966415405,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "inner_mod",
        "dist": 1.834767460823059,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "inner",
        "dist": 1.8558576107025146,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "imports",
        "dist": 1.8994872570037842,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "inner",
        "dist": 1.9037528038024902,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "nested_sub",
        "dist": 1.922367811203003,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "traits",
        "dist": 1.9656174182891846,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "unions",
        "dist": 1.98069429397583,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "inner",
        "dist": 1.9931719303131104,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "structs",
        "dist": 1.9940510988235474,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "const_static",
        "dist": 1.9957821369171143,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "type_alias",
        "dist": 2.005746841430664,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod type_alias;"
      },
      {
        "name": "enums",
        "dist": 2.0410399436950684,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "impls",
        "dist": 2.058504581451416,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 14,
    "node_type": "static",
    "prompt": "What is the overall flow of the vector embedding process, beginning with startup and ending with the database being embedded with hnsw indexed values?",
    "snippet_info": [
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.761303186416626,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 1.796743631362915,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.8180208206176758,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.9096710681915283,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.9377567768096924,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 2.0534234046936035,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 14,
    "node_type": "struct",
    "prompt": "What is the overall flow of the vector embedding process, beginning with startup and ending with the database being embedded with hnsw indexed values?",
    "snippet_info": [
      {
        "name": "DocumentedStruct",
        "dist": 1.737623691558838,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.787947654724121,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "SampleStruct",
        "dist": 1.8313734531402588,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "AttributedStruct",
        "dist": 1.8479228019714355,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "TupleStruct",
        "dist": 1.8563318252563477,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "UnitStruct",
        "dist": 1.8802424669265747,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "GenericStruct",
        "dist": 1.8858861923217773,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "Container",
        "dist": 1.8992629051208496,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "GenericStruct",
        "dist": 1.926020622253418,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "SubItem",
        "dist": 1.9429880380630493,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.0157175064086914,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      },
      {
        "name": "NestedItem",
        "dist": 2.02131724357605,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "PrivateStruct",
        "dist": 2.043989658355713,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "InnerStruct",
        "dist": 2.064816474914551,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 14,
    "node_type": "trait",
    "prompt": "What is the overall flow of the vector embedding process, beginning with startup and ending with the database being embedded with hnsw indexed values?",
    "snippet_info": [
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.6164195537567139,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 1.6404778957366943,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "AssocConstTrait",
        "dist": 1.648472785949707,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "ExampleTrait",
        "dist": 1.6518117189407349,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "trait ExampleTrait {\n    /// An associated constant required by a trait.\n    const TRAIT_REQ_CONST: bool;\n}"
      },
      {
        "name": "CrateTrait",
        "dist": 1.690455436706543,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(crate) trait CrateTrait {\n    fn crate_method(&self);\n}"
      },
      {
        "name": "ComplexGenericTrait",
        "dist": 1.7168928384780884,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.7266753911972046,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn process(&self, item: T) -> T;\n}"
      },
      {
        "name": "InternalTrait",
        "dist": 1.7437629699707031,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      },
      {
        "name": "DocumentedTrait",
        "dist": 1.7585119009017944,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "AssocTypeTrait",
        "dist": 1.7630231380462646,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeTrait {\n    type Output;\n    fn generate(&self) -> Self::Output;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.7840445041656494,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait SimpleTrait {\n    fn trait_method(&self) -> i32;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.804797649383545,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.808068037033081,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "AttributedTrait",
        "dist": 1.8115458488464355,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "LifetimeTrait",
        "dist": 1.821520209312439,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait LifetimeTrait<'a> {\n    fn get_ref(&'a self) -> &'a str;\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 14,
    "node_type": "type_alias",
    "prompt": "What is the overall flow of the vector embedding process, beginning with startup and ending with the database being embedded with hnsw indexed values?",
    "snippet_info": [
      {
        "name": "DisplayableContainer",
        "dist": 1.589011549949646,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "Mapping",
        "dist": 1.6452916860580444,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type Mapping<K, V> = std::collections::HashMap<K, V>;"
      },
      {
        "name": "CrateBuffer",
        "dist": 1.6556880474090576,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(crate) type CrateBuffer = Vec<u8>;"
      },
      {
        "name": "GenericContainer",
        "dist": 1.7061179876327515,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type GenericContainer<T> = Vec<T>;"
      },
      {
        "name": "DynDrawable",
        "dist": 1.7118752002716064,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "ByteArray",
        "dist": 1.7588131427764893,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ByteArray = [u8; 256];"
      },
      {
        "name": "UseInner",
        "dist": 1.8887343406677246,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "InnerPublic",
        "dist": 1.8944119215011597,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type InnerPublic = f64;"
      },
      {
        "name": "SimpleId",
        "dist": 1.9006078243255615,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type SimpleId = u64;"
      },
      {
        "name": "StrSlice",
        "dist": 1.9044315814971924,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type StrSlice<'a> = &'a str;"
      },
      {
        "name": "MyInt",
        "dist": 1.9076714515686035,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Type alias used in a constant.\ntype MyInt = i32;"
      },
      {
        "name": "MutStrSlice",
        "dist": 1.9319074153900146,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "Point",
        "dist": 1.9359534978866577,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "/// Documented public alias for a tuple type\npub type Point = (i32, i32);"
      },
      {
        "name": "UseInnerUnion",
        "dist": 1.9367480278015137,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "OuterPoint",
        "dist": 1.938167929649353,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 14,
    "node_type": "union",
    "prompt": "What is the overall flow of the vector embedding process, beginning with startup and ending with the database being embedded with hnsw indexed values?",
    "snippet_info": [
      {
        "name": "GenericUnion",
        "dist": 1.631892442703247,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.6920310258865356,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "CrateUnion",
        "dist": 1.7348464727401733,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "ReprCUnion",
        "dist": 1.7477576732635498,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 1.7622401714324951,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.8858895301818848,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.8879494667053223,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 1.9135302305221558,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "SecretData",
        "dist": 2.1135201454162598,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 15,
    "node_type": "function",
    "prompt": "What is our current test coverage? Which areas of the ploke-tui app need the most attention in terms of testing?",
    "snippet_info": [
      {
        "name": "ensure_features",
        "dist": 1.7571592330932617,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "use_all_const_static",
        "dist": 1.8171184062957764,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "five",
        "dist": 1.8502368927001953,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      },
      {
        "name": "use_imported_items",
        "dist": 1.9388976097106934,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 15,
    "node_type": "const",
    "prompt": "What is our current test coverage? Which areas of the ploke-tui app need the most attention in terms of testing?",
    "snippet_info": [
      {
        "name": "INNER_CONST",
        "dist": 1.8094021081924438,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.837019443511963,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.8412303924560547,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "doc_attr_const",
        "dist": 1.8843953609466553,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.931344747543335,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "EXPR_CONST",
        "dist": 1.9449580907821655,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 1.9484763145446777,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 1.9946510791778564,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 2.04030179977417,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 15,
    "node_type": "enum",
    "prompt": "What is our current test coverage? Which areas of the ploke-tui app need the most attention in terms of testing?",
    "snippet_info": [
      {
        "name": "OnlyTupleVariants",
        "dist": 1.636238694190979,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.7817542552947998,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.7859505414962769,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.8073828220367432,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.820310115814209,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.8305563926696777,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 1.8433126211166382,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.9185930490493774,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.93311607837677,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 1.9520491361618042,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 1.952305555343628,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.9590849876403809,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.9637413024902344,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.9836432933807373,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 2.0111172199249268,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 15,
    "node_type": "macro",
    "prompt": "What is our current test coverage? Which areas of the ploke-tui app need the most attention in terms of testing?",
    "snippet_info": [
      {
        "name": "documented_macro",
        "dist": 1.940600872039795,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 1.984906792640686,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      },
      {
        "name": "exported_macro",
        "dist": 2.0027456283569336,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 2.06209397315979,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 15,
    "node_type": "module",
    "prompt": "What is our current test coverage? Which areas of the ploke-tui app need the most attention in terms of testing?",
    "snippet_info": [
      {
        "name": "impls",
        "dist": 1.9196858406066895,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "inner",
        "dist": 1.9387987852096558,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "enums",
        "dist": 1.9468203783035278,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "imports",
        "dist": 1.9567385911941528,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "unions",
        "dist": 1.9690752029418945,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "macros",
        "dist": 2.001580238342285,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "inner",
        "dist": 2.0052971839904785,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "inner",
        "dist": 2.021824836730957,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "inner_mod",
        "dist": 2.032472610473633,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "const_static",
        "dist": 2.0337531566619873,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "traits",
        "dist": 2.038691997528076,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "structs",
        "dist": 2.0603649616241455,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "inner",
        "dist": 2.061866283416748,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "nested_sub",
        "dist": 2.0904388427734375,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "type_alias",
        "dist": 2.102834939956665,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod type_alias;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 15,
    "node_type": "static",
    "prompt": "What is our current test coverage? Which areas of the ploke-tui app need the most attention in terms of testing?",
    "snippet_info": [
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.8928771018981934,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.9108912944793701,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.951016902923584,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 1.9695212841033936,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 2.0115444660186768,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 2.0234482288360596,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 15,
    "node_type": "struct",
    "prompt": "What is our current test coverage? Which areas of the ploke-tui app need the most attention in terms of testing?",
    "snippet_info": [
      {
        "name": "TupleStruct",
        "dist": 1.9380944967269897,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "SampleStruct",
        "dist": 2.0321500301361084,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "DocumentedStruct",
        "dist": 2.032987117767334,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.0383238792419434,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "UnitStruct",
        "dist": 2.1052966117858887,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "AttributedStruct",
        "dist": 2.137444496154785,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "PrivateStruct",
        "dist": 2.1492350101470947,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "InnerStruct",
        "dist": 2.1496238708496094,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "NestedItem",
        "dist": 2.154763698577881,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "SubItem",
        "dist": 2.1592938899993896,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "Container",
        "dist": 2.171995162963867,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "SimpleStruct",
        "dist": 2.1819851398468018,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 2.194284200668335,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 2.242746353149414,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 15,
    "node_type": "trait",
    "prompt": "What is our current test coverage? Which areas of the ploke-tui app need the most attention in terms of testing?",
    "snippet_info": [
      {
        "name": "DocumentedTrait",
        "dist": 1.884015679359436,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.8859604597091675,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "MultiSuperTrait",
        "dist": 1.911998987197876,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait MultiSuperTrait: SimpleTrait + InternalTrait + Debug {\n    fn multi_super_method(&self);\n}"
      },
      {
        "name": "ComplexGenericTrait",
        "dist": 1.9172086715698242,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.919577956199646,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "AttributedTrait",
        "dist": 1.9306610822677612,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "UnsafeTrait",
        "dist": 1.9414198398590088,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub unsafe trait UnsafeTrait {\n    unsafe fn unsafe_method(&self);\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.9659137725830078,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait SimpleTrait {\n    fn trait_method(&self) -> i32;\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.9770102500915527,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "AssocConstTrait",
        "dist": 1.9771835803985596,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "PrivateTrait",
        "dist": 1.9884026050567627,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "trait PrivateTrait {\n    fn private_trait_method(&self);\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 2.0011489391326904,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "InnerPublicTrait",
        "dist": 2.005397319793701,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }"
      },
      {
        "name": "InternalTrait",
        "dist": 2.0056777000427246,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      },
      {
        "name": "SuperTrait",
        "dist": 2.022632598876953,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SuperTrait: SimpleTrait {\n    fn super_method(&self);\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 15,
    "node_type": "type_alias",
    "prompt": "What is our current test coverage? Which areas of the ploke-tui app need the most attention in terms of testing?",
    "snippet_info": [
      {
        "name": "UseOuterPoint",
        "dist": 1.8674858808517456,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "DynDrawable",
        "dist": 1.8996150493621826,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "MutStrSlice",
        "dist": 1.930763840675354,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "ByteArray",
        "dist": 1.9441261291503906,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ByteArray = [u8; 256];"
      },
      {
        "name": "Point",
        "dist": 1.9473801851272583,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "/// Documented public alias for a tuple type\npub type Point = (i32, i32);"
      },
      {
        "name": "OuterPoint",
        "dist": 1.950399398803711,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      },
      {
        "name": "MutRawPtr",
        "dist": 1.965342402458191,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "OldId",
        "dist": 1.9859195947647095,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "InnerPublic",
        "dist": 1.9876465797424316,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type InnerPublic = f64;"
      },
      {
        "name": "ComplexGeneric",
        "dist": 1.9892328977584839,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      },
      {
        "name": "DisplayableContainer",
        "dist": 1.9943203926086426,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "StrSlice",
        "dist": 2.012636423110962,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type StrSlice<'a> = &'a str;"
      },
      {
        "name": "SimpleId",
        "dist": 2.013237476348877,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type SimpleId = u64;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 2.0292670726776123,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "IdAlias",
        "dist": 2.0310921669006348,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type IdAlias = SimpleId;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 15,
    "node_type": "union",
    "prompt": "What is our current test coverage? Which areas of the ploke-tui app need the most attention in terms of testing?",
    "snippet_info": [
      {
        "name": "DocumentedUnion",
        "dist": 1.8510267734527588,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "ReprCUnion",
        "dist": 1.9058902263641357,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      },
      {
        "name": "SecretData",
        "dist": 1.932824969291687,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.9337961673736572,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 1.9363619089126587,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "GenericUnion",
        "dist": 1.9367314577102661,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.9433343410491943,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "CrateUnion",
        "dist": 1.9984084367752075,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 2.0620131492614746,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 16,
    "node_type": "function",
    "prompt": "Add some more doc comments with testable examples to the functions in the `database.rs` file.",
    "snippet_info": [
      {
        "name": "use_imported_items",
        "dist": 1.419235348701477,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "use_all_const_static",
        "dist": 1.7139739990234375,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.8875582218170166,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      },
      {
        "name": "five",
        "dist": 1.9404544830322266,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 16,
    "node_type": "const",
    "prompt": "Add some more doc comments with testable examples to the functions in the `database.rs` file.",
    "snippet_info": [
      {
        "name": "doc_attr_const",
        "dist": 1.7900007963180542,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.8777706623077393,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.8932461738586426,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.9128810167312622,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "INNER_CONST",
        "dist": 1.9179705381393433,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 1.9988977909088135,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 2.027353048324585,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 2.1223976612091064,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "EXPR_CONST",
        "dist": 2.1371052265167236,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 16,
    "node_type": "enum",
    "prompt": "Add some more doc comments with testable examples to the functions in the `database.rs` file.",
    "snippet_info": [
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.5195406675338745,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.5516972541809082,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.6229727268218994,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.7108025550842285,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.7406065464019775,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.7443859577178955,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.7583988904953003,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 1.812187910079956,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.814371109008789,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 1.8288195133209229,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.883270025253296,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.8863699436187744,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.904768705368042,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "CrateEnum",
        "dist": 2.0450682640075684,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 2.1004247665405273,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 16,
    "node_type": "macro",
    "prompt": "Add some more doc comments with testable examples to the functions in the `database.rs` file.",
    "snippet_info": [
      {
        "name": "exported_macro",
        "dist": 1.7989857196807861,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.8774298429489136,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "local_macro",
        "dist": 1.9453999996185303,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 1.9502203464508057,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 16,
    "node_type": "module",
    "prompt": "Add some more doc comments with testable examples to the functions in the `database.rs` file.",
    "snippet_info": [
      {
        "name": "inner",
        "dist": 1.564038634300232,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.592452049255371,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "sub_imports",
        "dist": 1.6746430397033691,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod sub_imports {\n    // Import from parent module\n    use super::fmt;\n    // Import from grandparent module (crate root)\n    use crate::enums::DocumentedEnum;\n    // Import from std\n    use std::sync::Arc;\n    // Import using self\n    use self::nested_sub::NestedItem;\n    // Import using super\n    use super::super::structs::TupleStruct; // Goes up two levels\n\n    pub struct SubItem;\n\n    pub mod nested_sub {\n        pub struct NestedItem;\n    }\n}"
      },
      {
        "name": "inner_mod",
        "dist": 1.7785608768463135,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "inner",
        "dist": 1.7838599681854248,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "inner",
        "dist": 1.8656888008117676,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "nested_sub",
        "dist": 1.8800859451293945,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      },
      {
        "name": "enums",
        "dist": 1.9508534669876099,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "type_alias",
        "dist": 1.9629062414169312,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod type_alias;"
      },
      {
        "name": "imports",
        "dist": 1.97555673122406,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "impls",
        "dist": 1.9875162839889526,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "structs",
        "dist": 1.9877630472183228,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "traits",
        "dist": 1.9976117610931396,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "const_static",
        "dist": 2.0037782192230225,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "macros",
        "dist": 2.017962694168091,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 16,
    "node_type": "static",
    "prompt": "Add some more doc comments with testable examples to the functions in the `database.rs` file.",
    "snippet_info": [
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.613407015800476,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.6847243309020996,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.7498555183410645,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 1.873909592628479,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 1.8775770664215088,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.9613735675811768,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 16,
    "node_type": "struct",
    "prompt": "Add some more doc comments with testable examples to the functions in the `database.rs` file.",
    "snippet_info": [
      {
        "name": "DocumentedStruct",
        "dist": 1.5568678379058838,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 1.7388648986816406,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "AttributedStruct",
        "dist": 1.7463274002075195,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SampleStruct",
        "dist": 1.7522809505462646,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.7718216180801392,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "TupleStruct",
        "dist": 1.8237793445587158,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "GenericStruct",
        "dist": 1.8340433835983276,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "SubItem",
        "dist": 1.886359691619873,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "PrivateStruct",
        "dist": 1.9427714347839355,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.9473960399627686,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      },
      {
        "name": "UnitStruct",
        "dist": 1.9597622156143188,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "NestedItem",
        "dist": 2.021751880645752,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "InnerStruct",
        "dist": 2.052217960357666,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "Container",
        "dist": 2.206040859222412,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 16,
    "node_type": "trait",
    "prompt": "Add some more doc comments with testable examples to the functions in the `database.rs` file.",
    "snippet_info": [
      {
        "name": "DocumentedTrait",
        "dist": 1.425700306892395,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "/// Documented public trait\npub trait DocumentedTrait {\n    /// Required method documentation\n    fn documented_method(&self);\n}"
      },
      {
        "name": "AttributedTrait",
        "dist": 1.4497344493865967,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "#[must_use = \"Trait results should be used\"]\npub trait AttributedTrait {\n    fn calculate(&self) -> f64;\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.5012879371643066,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "ComplexGenericTrait",
        "dist": 1.5157911777496338,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait ComplexGenericTrait<'a, T: Debug + Clone, S: Send + Sync>\nwhere\n    T: 'a,\n{\n    fn complex_process(&'a self, item: T, other: S) -> &'a T;\n}"
      },
      {
        "name": "MultiSuperTrait",
        "dist": 1.524597406387329,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait MultiSuperTrait: SimpleTrait + InternalTrait + Debug {\n    fn multi_super_method(&self);\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.5302681922912598,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "AssocTrait",
        "dist": 1.5340989828109741,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait AssocTrait {\n    type Output;\n    const ID: u32;\n\n    fn create_output(&self) -> Self::Output;\n}"
      },
      {
        "name": "SuperGraphNodeTrait",
        "dist": 1.5463132858276367,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.6090354919433594,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "GenericSuperTrait",
        "dist": 1.6235060691833496,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericSuperTrait<T>: GenericTrait<T> {\n    fn generic_super_method(&self, item: T);\n}"
      },
      {
        "name": "ExampleTrait",
        "dist": 1.627392292022705,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "trait ExampleTrait {\n    /// An associated constant required by a trait.\n    const TRAIT_REQ_CONST: bool;\n}"
      },
      {
        "name": "AssocConstTrait",
        "dist": 1.6307178735733032,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.6361868381500244,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn generic_trait_method(&self, value: T);\n}"
      },
      {
        "name": "AssocTypeTrait",
        "dist": 1.6392443180084229,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeTrait {\n    type Output;\n    fn generate(&self) -> Self::Output;\n}"
      },
      {
        "name": "InternalTrait",
        "dist": 1.6417609453201294,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 16,
    "node_type": "type_alias",
    "prompt": "Add some more doc comments with testable examples to the functions in the `database.rs` file.",
    "snippet_info": [
      {
        "name": "DynDrawable",
        "dist": 1.5207602977752686,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DynDrawable = dyn std::fmt::Debug;"
      },
      {
        "name": "DisplayableContainer",
        "dist": 1.6642324924468994,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "IdAlias",
        "dist": 1.7037758827209473,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type IdAlias = SimpleId;"
      },
      {
        "name": "MutStrSlice",
        "dist": 1.7207059860229492,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "Mapping",
        "dist": 1.7301048040390015,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type Mapping<K, V> = std::collections::HashMap<K, V>;"
      },
      {
        "name": "OldId",
        "dist": 1.7326000928878784,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "#[deprecated(note = \"Use NewId instead\")]\npub type OldId = String;"
      },
      {
        "name": "GenericContainer",
        "dist": 1.7702207565307617,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type GenericContainer<T> = Vec<T>;"
      },
      {
        "name": "MyInt",
        "dist": 1.7938299179077148,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Type alias used in a constant.\ntype MyInt = i32;"
      },
      {
        "name": "ByteArray",
        "dist": 1.8119102716445923,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ByteArray = [u8; 256];"
      },
      {
        "name": "CrateBuffer",
        "dist": 1.8382289409637451,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(crate) type CrateBuffer = Vec<u8>;"
      },
      {
        "name": "OuterPoint",
        "dist": 1.8523297309875488,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      },
      {
        "name": "StrSlice",
        "dist": 1.8561599254608154,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type StrSlice<'a> = &'a str;"
      },
      {
        "name": "Point",
        "dist": 1.859944224357605,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "/// Documented public alias for a tuple type\npub type Point = (i32, i32);"
      },
      {
        "name": "MathOperation",
        "dist": 1.9035743474960327,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MathOperation = fn(i32, i32) -> i32;"
      },
      {
        "name": "ComplexGeneric",
        "dist": 1.913669466972351,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type ComplexGeneric<T>\nwhere\n    T: Clone + Send + 'static,\n= Option<T>;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 16,
    "node_type": "union",
    "prompt": "Add some more doc comments with testable examples to the functions in the `database.rs` file.",
    "snippet_info": [
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.7373080253601074,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "ReprCUnion",
        "dist": 1.8117377758026123,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.831913709640503,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "GenericUnion",
        "dist": 1.8330578804016113,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "CrateUnion",
        "dist": 1.8693245649337769,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 1.8769899606704712,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.9922268390655518,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "SecretData",
        "dist": 2.0247511863708496,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 2.154184579849243,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 17,
    "node_type": "function",
    "prompt": "We want to show the user the context window of the LLM they are using, to give them an intuitive way to understand how full the context window is. Let's add a line on the right side of the user interface that grows with a longer context and then shrinks if the context decreases.",
    "snippet_info": [
      {
        "name": "use_all_const_static",
        "dist": 1.656166672706604,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(unused_variables, clippy::let_unit_value)]\npub fn use_all_const_static() {\n    // Top Level\n    let _int = TOP_LEVEL_INT;\n    let _bool = TOP_LEVEL_BOOL;\n    let _str = TOP_LEVEL_STR;\n    let _crate_static = TOP_LEVEL_CRATE_STATIC;\n\n    // Type Variations\n    let _arr = ARRAY_CONST;\n    let _tuple = TUPLE_STATIC;\n    let _struct = STRUCT_CONST;\n    let _aliased = ALIASED_CONST;\n\n    // Initializer Variations\n    let _expr = EXPR_CONST;\n    let _fn_call = FN_CALL_CONST;\n\n    // Attributes and Docs\n    let _doc_attr = doc_attr_const;\n    #[cfg(target_os = \"linux\")]\n    let _doc_attr_static = DOC_ATTR_STATIC;\n\n    // Associated Constants\n    let _impl_const = Container::IMPL_CONST;\n    let _trait_const = <Container as ExampleTrait>::TRAIT_REQ_CONST;\n\n    // Inline Module Items\n    let _inner_const = inner_mod::INNER_CONST;\n\n    // Accessing mutable statics requires unsafe block\n    unsafe {\n        TOP_LEVEL_COUNTER += 1;\n        let _counter = TOP_LEVEL_COUNTER;\n\n        inner_mod::INNER_MUT_STATIC = !inner_mod::INNER_MUT_STATIC;\n        let _inner_mut = inner_mod::INNER_MUT_STATIC;\n    }\n\n    // Println to potentially use some values and avoid unused warnings further\n    println!(\"Used: {}, {}, {}, {}\", _int, _bool, _str, _crate_static);\n}"
      },
      {
        "name": "use_imported_items",
        "dist": 1.9046716690063477,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub fn use_imported_items() {\n    let _map = HashMap::<String, i32>::new();\n    let _fmt_res: fmt::Result = Ok(());\n    let _io_res: IoResult<()> = Ok(());\n    let _local_struct = MySimpleStruct {\n        field: \"example\".to_string(),\n    };\n    let _fs_res = fs::read_to_string(\"dummy\");\n    let _file: File;\n    let _path: &Path;\n    let _path_buf = PathBuf::new();\n    let _enum1 = SampleEnum1::Variant1;\n    let _enum_data = EnumWithData::Variant1(1);\n    struct DummyTraitUser;\n    impl SimpleTrait for DummyTraitUser {\n        fn required_method(&self) -> i32 {\n            5\n        }\n    }\n    let _trait_user = DummyTraitUser;\n    // MyGenTrait usage requires type annotation\n    struct GenTraitImpl;\n    impl<T> MyGenTrait<T> for GenTraitImpl {\n        fn process(&self, item: T) -> T {\n            item\n        }\n    }\n    let _gen_trait_user = GenTraitImpl;\n\n    // Glob import usage (e.g., current_dir)\n    let _cwd = current_dir();\n\n    // Relative path usage\n    let _sub_item = SubItem;\n    let _super_item = AttributedStruct {\n        field: \"x\".to_string(),\n    };\n    let _crate_item: SimpleId = 123;\n\n    // Absolute path usage\n    let _duration = Duration::from_secs(1);\n\n    // Extern crate usage (implicitly via types/macros if used)\n    // let _serde_val: serde::Value;\n    // let _serde_alias_val: SerdeAlias::Value;\n\n    // Nested module usage\n    let _arc = Arc::new(1);\n    let _nested_item = sub_imports::nested_sub::NestedItem;\n    let _tuple_struct = TupleStruct(1, 2);\n}"
      },
      {
        "name": "five",
        "dist": 1.9075098037719727,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const fn five() -> i32 {\n    5\n}"
      },
      {
        "name": "ensure_features",
        "dist": 1.9742417335510254,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "#[cfg(test)]\nfn ensure_features() {\n    #[cfg(feature = \"enum_feature_one\")]\n    let _ = \"enum_feature_one_active\";\n    #[cfg(feature = \"enum_main_feature\")]\n    let _ = \"enum_main_feature_active\";\n    #[cfg(feature = \"enum_variant_feature\")]\n    let _ = \"enum_variant_feature_active\";\n    #[cfg(feature = \"enum_field_feature\")]\n    let _ = \"enum_field_feature_active\";\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 17,
    "node_type": "const",
    "prompt": "We want to show the user the context window of the LLM they are using, to give them an intuitive way to understand how full the context window is. Let's add a line on the right side of the user interface that grows with a longer context and then shrinks if the context decreases.",
    "snippet_info": [
      {
        "name": "doc_attr_const",
        "dist": 1.5801870822906494,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented constant.\n#[deprecated(note = \"Use NEW_DOC_ATTR_CONST instead\")]\n#[allow(non_upper_case_globals, clippy::approx_constant)] // Example of more attributes\npub const doc_attr_const: f64 = 3.14;"
      },
      {
        "name": "STRUCT_CONST",
        "dist": 1.6364232301712036,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant struct instance.\nconst STRUCT_CONST: SimpleStruct = SimpleStruct { x: 99, y: true };"
      },
      {
        "name": "EXPR_CONST",
        "dist": 1.739710807800293,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const EXPR_CONST: i32 = 5 * 2 + 1;"
      },
      {
        "name": "FN_CALL_CONST",
        "dist": 1.8139358758926392,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant initialized with a call to a const function.\nconst FN_CALL_CONST: i32 = five();"
      },
      {
        "name": "ARRAY_CONST",
        "dist": 1.8193775415420532,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "const ARRAY_CONST: [u8; 3] = [1, 2, 3];"
      },
      {
        "name": "TOP_LEVEL_INT",
        "dist": 1.8527642488479614,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level private constant with a simple integer type.\nconst TOP_LEVEL_INT: i32 = 10;"
      },
      {
        "name": "INNER_CONST",
        "dist": 1.8714405298233032,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "pub(crate) const INNER_CONST: u8 = 1;"
      },
      {
        "name": "TOP_LEVEL_BOOL",
        "dist": 1.8778858184814453,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public constant with a boolean type.\npub const TOP_LEVEL_BOOL: bool = true;"
      },
      {
        "name": "ALIASED_CONST",
        "dist": 1.8928117752075195,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Constant using a type alias.\nconst ALIASED_CONST: MyInt = -5;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 17,
    "node_type": "enum",
    "prompt": "We want to show the user the context window of the LLM they are using, to give them an intuitive way to understand how full the context window is. Let's add a line on the right side of the user interface that grows with a longer context and then shrinks if the context decreases.",
    "snippet_info": [
      {
        "name": "CrateEnum",
        "dist": 1.7432613372802734,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "pub(crate) enum CrateEnum {\n    B,\n}"
      },
      {
        "name": "JustConstGeneric",
        "dist": 1.7608184814453125,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing const generics.\npub enum JustConstGeneric<const X: usize, const Y: usize> {\n    VariantX([u8; X]),\n    VariantY([u16; Y]),\n}"
      },
      {
        "name": "JustLifetimeGeneric",
        "dist": 1.7710506916046143,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing lifetime generics.\npub enum JustLifetimeGeneric<'x, 'y> {\n    VariantX(&'x i32),\n    VariantY(&'y str),\n}"
      },
      {
        "name": "SampleEnum",
        "dist": 1.7759068012237549,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating struct-like variants.\npub enum SampleEnum {\n    Variant1,\n    Variant2 { value: i32 },\n    Variant3,\n}"
      },
      {
        "name": "DocumentedEnum",
        "dist": 1.7761178016662598,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum with a doc comment.\n/// This is a documented enum\npub enum DocumentedEnum {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "OnlyStructVariants",
        "dist": 1.7853107452392578,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field struct variants.\npub enum OnlyStructVariants {\n    User { id: u64, username: String },\n    Product { sku: String, price: f32, in_stock: bool },\n}"
      },
      {
        "name": "EnumWithMixedVariants",
        "dist": 1.7963991165161133,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with various variant kinds for detailed field parsing (though not fully checked by ExpectedEnumNode yet).\npub enum EnumWithMixedVariants {\n    Simple,\n    TupleMulti(i32, String, bool),\n    StructMulti {\n        id: u32,\n        #[cfg(feature = \"enum_field_feature\")]\n        name: String,\n        active: bool,\n    },\n    /// Doc on a unit variant within a mixed enum.\n    UnitWithDoc,\n}"
      },
      {
        "name": "SampleEnum1",
        "dist": 1.8040883541107178,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// A simple public enum with unit-like variants.\npub enum SampleEnum1 {\n    Variant1,\n    Variant2,\n}"
      },
      {
        "name": "PrivateEnum",
        "dist": 1.804328203201294,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "enum PrivateEnum {\n    A,\n}"
      },
      {
        "name": "GenericEnum",
        "dist": 1.8160858154296875,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with lifetime, type, and const generic parameters, and a where clause.\n#[derive(Debug, Clone)] // Attribute for testing\npub enum GenericEnum<'a, T: Default + Clone, const N: usize>\nwhere\n    T: Send, // Where clause\n{\n    /// Doc comment on a generic variant.\n    GenericVariant(T),\n    LifetimeVariant(&'a str),\n    ConstGenericVariant([u8; N]),\n    #[cfg(feature = \"enum_feature_one\")] // CFG on a variant\n    ConditionalGeneric(Option<T>),\n}"
      },
      {
        "name": "JustTypeGeneric",
        "dist": 1.860219120979309,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing type generics.\npub enum JustTypeGeneric<A, B> {\n    VariantA(A),\n    VariantB(B),\n}"
      },
      {
        "name": "OnlyTupleVariants",
        "dist": 1.8710304498672485,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing multi-field tuple variants.\npub enum OnlyTupleVariants {\n    Point(i32, i32, i32),\n    Color(u8, u8, u8, u8),\n}"
      },
      {
        "name": "EnumWithData",
        "dist": 1.8765966892242432,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// An enum demonstrating variants with unnamed (tuple) data.\npub enum EnumWithData {\n    Variant1(i32),\n    Variant2(String),\n}"
      },
      {
        "name": "JustWhereClause",
        "dist": 1.899989366531372,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum solely for testing a simple where clause.\npub enum JustWhereClause<T>\nwhere\n    T: Copy,\n{\n    Data(T),\n}"
      },
      {
        "name": "EnumWithAttributesAndDiscriminants",
        "dist": 1.97455894947052,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/enums.rs",
        "snippet": "/// Enum with `#[repr]` attribute and explicit discriminants.\n#[repr(u16)]\npub enum EnumWithAttributesAndDiscriminants {\n    Up = 1,\n    #[allow(dead_code)] // Attribute on a variant\n    Down, // Implicitly 2\n    Left = 10,\n    /// Doc comment on a variant with an implicit discriminant.\n    Right, // Implicitly 11\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 17,
    "node_type": "macro",
    "prompt": "We want to show the user the context window of the LLM they are using, to give them an intuitive way to understand how full the context window is. Let's add a line on the right side of the user interface that grows with a longer context and then shrinks if the context decreases.",
    "snippet_info": [
      {
        "name": "local_macro",
        "dist": 1.729638934135437,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "macro_rules! local_macro {\n    ($x:expr) => {\n        $x * 2\n    };\n}"
      },
      {
        "name": "documented_macro",
        "dist": 1.765019416809082,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A documented macro_rules macro.\n#[macro_export]\nmacro_rules! documented_macro {\n    ($($tts:tt)*) => {\n        stringify!($($tts)*)\n    };\n}"
      },
      {
        "name": "exported_macro",
        "dist": 1.8195337057113647,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A simple exported macro_rules macro.\n#[macro_export]\nmacro_rules! exported_macro {\n    () => {\n        println!(\"Exported!\")\n    };\n}"
      },
      {
        "name": "attributed_macro",
        "dist": 1.8336492776870728,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/macros.rs",
        "snippet": "/// A macro_rules macro with other attributes.\n#[macro_export]\n#[allow(clippy::empty_loop)]\nmacro_rules! attributed_macro {\n    () => {\n        loop {}\n    };\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 17,
    "node_type": "module",
    "prompt": "We want to show the user the context window of the LLM they are using, to give them an intuitive way to understand how full the context window is. Let's add a line on the right side of the user interface that grows with a longer context and then shrinks if the context decreases.",
    "snippet_info": [
      {
        "name": "inner_mod",
        "dist": 1.5673214197158813,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "mod inner_mod {\n    // Constant visible only within the crate, defined inside an inline module.\n    pub(crate) const INNER_CONST: u8 = 1;\n\n    // Static mutable boolean visible only to the parent module (`crate`), defined inside an inline module.\n    #[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;\n}"
      },
      {
        "name": "inner",
        "dist": 1.6324138641357422,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "mod inner {\n    // Inherited visibility within the private module `inner`\n    type InnerSecret = bool;\n\n    // Public within the private module `inner`\n    pub type InnerPublic = f64;\n\n    // Alias using a type from the outer scope\n    pub(super) type OuterPoint = super::Point;\n}"
      },
      {
        "name": "impls",
        "dist": 1.6804327964782715,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod impls;"
      },
      {
        "name": "macros",
        "dist": 1.7062633037567139,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod macros;"
      },
      {
        "name": "imports",
        "dist": 1.7136328220367432,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod imports;"
      },
      {
        "name": "unions",
        "dist": 1.7295689582824707,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod unions;"
      },
      {
        "name": "enums",
        "dist": 1.730704426765442,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod enums;"
      },
      {
        "name": "structs",
        "dist": 1.747485876083374,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod structs;"
      },
      {
        "name": "inner",
        "dist": 1.766040325164795,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "mod inner {\n    use super::{SimpleStruct, SimpleTrait}; // Import necessary items\n\n    // Inherent impl inside module\n    impl SimpleStruct {\n        pub(super) fn method_in_module(&self) -> i32 {\n            self.data + 1\n        }\n    }\n\n    // Trait impl inside module\n    struct InnerStruct;\n    impl SimpleTrait for InnerStruct {\n        fn trait_method(&self) -> i32 {\n            42\n        }\n    }\n}"
      },
      {
        "name": "inner",
        "dist": 1.7757022380828857,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "mod inner {\n    // Private union inside private module\n    union InnerSecret {\n        a: i8,\n        b: u8,\n    }\n\n    // Public union inside private module\n    pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }\n}"
      },
      {
        "name": "type_alias",
        "dist": 1.7980189323425293,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod type_alias;"
      },
      {
        "name": "inner",
        "dist": 1.8030166625976562,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "mod inner {\n    // Private trait inside private module\n    trait InnerSecretTrait {\n        fn secret_op(&self);\n    }\n\n    // Public trait inside private module\n    pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }\n\n    // Trait using super\n    pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }\n}"
      },
      {
        "name": "const_static",
        "dist": 1.8164900541305542,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod const_static;"
      },
      {
        "name": "traits",
        "dist": 1.821852684020996,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/lib.rs",
        "snippet": "pub mod traits;"
      },
      {
        "name": "nested_sub",
        "dist": 1.8538763523101807,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub mod nested_sub {\n        pub struct NestedItem;\n    }"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 17,
    "node_type": "static",
    "prompt": "We want to show the user the context window of the LLM they are using, to give them an intuitive way to understand how full the context window is. Let's add a line on the right side of the user interface that grows with a longer context and then shrinks if the context decreases.",
    "snippet_info": [
      {
        "name": "TOP_LEVEL_COUNTER",
        "dist": 1.6627602577209473,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level public mutable static counter.\npub static mut TOP_LEVEL_COUNTER: u32 = 0;"
      },
      {
        "name": "TOP_LEVEL_STR",
        "dist": 1.7168104648590088,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TOP_LEVEL_STR: &str = \"hello world\";"
      },
      {
        "name": "TOP_LEVEL_CRATE_STATIC",
        "dist": 1.7309925556182861,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// A top-level crate-visible static string.\npub(crate) static TOP_LEVEL_CRATE_STATIC: &str = \"crate visible\";"
      },
      {
        "name": "INNER_MUT_STATIC",
        "dist": 1.7326767444610596,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "#[allow(dead_code)] // Allow unused for fixture simplicity\n    pub(super) static mut INNER_MUT_STATIC: bool = false;"
      },
      {
        "name": "DOC_ATTR_STATIC",
        "dist": 1.8431596755981445,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// This is a documented static variable.\n#[cfg(target_os = \"linux\")] // Example attribute\nstatic DOC_ATTR_STATIC: &str = \"Linux specific\";"
      },
      {
        "name": "TUPLE_STATIC",
        "dist": 1.9024235010147095,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "static TUPLE_STATIC: (i32, bool) = (5, false);"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 17,
    "node_type": "struct",
    "prompt": "We want to show the user the context window of the LLM they are using, to give them an intuitive way to understand how full the context window is. Let's add a line on the right side of the user interface that grows with a longer context and then shrinks if the context decreases.",
    "snippet_info": [
      {
        "name": "Container",
        "dist": 1.7183525562286377,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct Container;"
      },
      {
        "name": "UnitStruct",
        "dist": 1.7502107620239258,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct UnitStruct;"
      },
      {
        "name": "InnerStruct",
        "dist": 1.7616441249847412,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct InnerStruct;"
      },
      {
        "name": "SubItem",
        "dist": 1.7820590734481812,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct SubItem;"
      },
      {
        "name": "DocumentedStruct",
        "dist": 1.785240650177002,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "/// This is a documented struct\npub struct DocumentedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "NestedItem",
        "dist": 1.7975952625274658,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/imports.rs",
        "snippet": "pub struct NestedItem;"
      },
      {
        "name": "GenericStruct",
        "dist": 1.8277345895767212,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub value: T,\n}"
      },
      {
        "name": "AttributedStruct",
        "dist": 1.8526897430419922,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "#[derive(Debug)]\npub struct AttributedStruct {\n    pub field: String,\n}"
      },
      {
        "name": "PrivateStruct",
        "dist": 1.8592195510864258,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "struct PrivateStruct {\n    secret: String,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.8659532070159912,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "struct SimpleStruct {\n    x: i32,\n    y: bool,\n}"
      },
      {
        "name": "GenericStruct",
        "dist": 1.86750066280365,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct GenericStruct<T> {\n    pub field: T,\n}"
      },
      {
        "name": "SimpleStruct",
        "dist": 1.8816637992858887,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub struct SimpleStruct {\n    pub data: i32,\n}"
      },
      {
        "name": "TupleStruct",
        "dist": 1.9529633522033691,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct TupleStruct(pub i32, pub i32);"
      },
      {
        "name": "SampleStruct",
        "dist": 1.9710017442703247,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/structs.rs",
        "snippet": "pub struct SampleStruct {\n    pub field: String,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 17,
    "node_type": "trait",
    "prompt": "We want to show the user the context window of the LLM they are using, to give them an intuitive way to understand how full the context window is. Let's add a line on the right side of the user interface that grows with a longer context and then shrinks if the context decreases.",
    "snippet_info": [
      {
        "name": "InnerPublicTrait",
        "dist": 1.8381423950195312,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait InnerPublicTrait {\n        fn public_inner_op(&self);\n    }"
      },
      {
        "name": "SelfUsageTrait",
        "dist": 1.839526653289795,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfUsageTrait {\n    fn returns_self(self) -> Self\n    where\n        Self: Sized;\n    fn takes_self(&self, other: &Self);\n}"
      },
      {
        "name": "AssocTypeWithBounds",
        "dist": 1.8432693481445312,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocTypeWithBounds {\n    type BoundedOutput: Debug + Clone;\n    fn generate_bounded(&self) -> Self::BoundedOutput;\n}"
      },
      {
        "name": "SuperGraphNodeTrait",
        "dist": 1.8844987154006958,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(super) trait SuperGraphNodeTrait: super::SimpleTrait {\n        fn super_visible_op(&self);\n    }"
      },
      {
        "name": "CrateTrait",
        "dist": 1.8901742696762085,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub(crate) trait CrateTrait {\n    fn crate_method(&self);\n}"
      },
      {
        "name": "GenericTrait",
        "dist": 1.910962700843811,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait GenericTrait<T> {\n    fn process(&self, item: T) -> T;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.923011302947998,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "pub trait SimpleTrait {\n    fn trait_method(&self) -> i32;\n}"
      },
      {
        "name": "LifetimeTrait",
        "dist": 1.9300577640533447,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait LifetimeTrait<'a> {\n    fn get_ref(&'a self) -> &'a str;\n}"
      },
      {
        "name": "SimpleTrait",
        "dist": 1.937720775604248,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SimpleTrait {\n    fn required_method(&self) -> i32;\n}"
      },
      {
        "name": "ExampleTrait",
        "dist": 1.9438097476959229,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "trait ExampleTrait {\n    /// An associated constant required by a trait.\n    const TRAIT_REQ_CONST: bool;\n}"
      },
      {
        "name": "InnerSecretTrait",
        "dist": 1.956998348236084,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InnerSecretTrait {\n        fn secret_op(&self);\n    }"
      },
      {
        "name": "PrivateTrait",
        "dist": 1.9644349813461304,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/impls.rs",
        "snippet": "trait PrivateTrait {\n    fn private_trait_method(&self);\n}"
      },
      {
        "name": "SelfInAssocBound",
        "dist": 1.9778554439544678,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait SelfInAssocBound {\n    type Related: SimpleTrait; // Related type must implement SimpleTrait\n    fn get_related(&self) -> Self::Related;\n}"
      },
      {
        "name": "AssocConstTrait",
        "dist": 1.9863967895507812,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "pub trait AssocConstTrait {\n    const ID: u32;\n    fn get_id(&self) -> u32 {\n        Self::ID\n    }\n}"
      },
      {
        "name": "InternalTrait",
        "dist": 1.9918760061264038,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/traits.rs",
        "snippet": "trait InternalTrait {\n    fn default_method(&self) -> String {\n        \"Default implementation\".to_string()\n    }\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 17,
    "node_type": "type_alias",
    "prompt": "We want to show the user the context window of the LLM they are using, to give them an intuitive way to understand how full the context window is. Let's add a line on the right side of the user interface that grows with a longer context and then shrinks if the context decreases.",
    "snippet_info": [
      {
        "name": "DisplayableContainer",
        "dist": 1.6056687831878662,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type DisplayableContainer<T: std::fmt::Display> = Vec<T>;"
      },
      {
        "name": "UseOuterPoint",
        "dist": 1.616581916809082,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseOuterPoint = inner::OuterPoint;"
      },
      {
        "name": "GenericContainer",
        "dist": 1.6385955810546875,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type GenericContainer<T> = Vec<T>;"
      },
      {
        "name": "UseInner",
        "dist": 1.6611870527267456,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type UseInner = inner::InnerPublic;"
      },
      {
        "name": "CrateBuffer",
        "dist": 1.7117700576782227,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(crate) type CrateBuffer = Vec<u8>;"
      },
      {
        "name": "UseInnerUnion",
        "dist": 1.7309770584106445,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "type UseInnerUnion = inner::InnerPublic;"
      },
      {
        "name": "InnerSecret",
        "dist": 1.7452898025512695,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InnerSecret = bool;"
      },
      {
        "name": "OuterPoint",
        "dist": 1.7472023963928223,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub(super) type OuterPoint = super::Point;"
      },
      {
        "name": "MutRawPtr",
        "dist": 1.7822117805480957,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type MutRawPtr = *mut u8;"
      },
      {
        "name": "InnerPublic",
        "dist": 1.7850062847137451,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type InnerPublic = f64;"
      },
      {
        "name": "ConstRawPtr",
        "dist": 1.8011561632156372,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type ConstRawPtr = *const u8;"
      },
      {
        "name": "InternalCounter",
        "dist": 1.8097167015075684,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "type InternalCounter = i32;"
      },
      {
        "name": "MutStrSlice",
        "dist": 1.8176451921463013,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type MutStrSlice<'a> = &'a mut str;"
      },
      {
        "name": "SimpleId",
        "dist": 1.8471461534500122,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/type_alias.rs",
        "snippet": "pub type SimpleId = u64;"
      },
      {
        "name": "MyInt",
        "dist": 1.8931751251220703,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/const_static.rs",
        "snippet": "/// Type alias used in a constant.\ntype MyInt = i32;"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  },
  {
    "prompt_idx": 17,
    "node_type": "union",
    "prompt": "We want to show the user the context window of the LLM they are using, to give them an intuitive way to understand how full the context window is. Let's add a line on the right side of the user interface that grows with a longer context and then shrinks if the context decreases.",
    "snippet_info": [
      {
        "name": "GenericUnion",
        "dist": 1.6404366493225098,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union GenericUnion<T> {\n    value: std::mem::ManuallyDrop<T>, // ManuallyDrop often used in unions\n    raw: usize,\n}"
      },
      {
        "name": "CrateUnion",
        "dist": 1.800818920135498,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub(crate) union CrateUnion {\n    ptr: *const u8,\n    offset: usize,\n}"
      },
      {
        "name": "UnionWithFieldAttr",
        "dist": 1.801213026046753,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union UnionWithFieldAttr {\n    #[cfg(target_endian = \"big\")]\n    big_endian_data: u32,\n    #[cfg(not(target_endian = \"big\"))]\n    little_endian_data: u32,\n    always_present: u8,\n}"
      },
      {
        "name": "InnerSecret",
        "dist": 1.8235607147216797,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union InnerSecret {\n        a: i8,\n        b: u8,\n    }"
      },
      {
        "name": "IntOrFloat",
        "dist": 1.8412319421768188,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union IntOrFloat {\n    i: i32,\n    f: f32,\n}"
      },
      {
        "name": "InnerPublic",
        "dist": 1.8462327718734741,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "pub union InnerPublic {\n        x: f32,\n        y: f32,\n    }"
      },
      {
        "name": "SecretData",
        "dist": 1.884773850440979,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "union SecretData {\n    key: u64,\n    flag: bool,\n}"
      },
      {
        "name": "DocumentedUnion",
        "dist": 1.9775751829147339,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "/// Documented public union\npub union DocumentedUnion {\n    data: [u8; 16],\n    id: u128,\n}"
      },
      {
        "name": "ReprCUnion",
        "dist": 2.065457344055176,
        "file_path": "/home/brasides/code/second_aider_dir/ploke/tests/fixture_crates/fixture_nodes/src/unions.rs",
        "snippet": "#[repr(C)]\npub union ReprCUnion {\n    integer: i64,\n    pointer: *mut std::ffi::c_void,\n}"
      }
    ],
    "query_params": {
      "k": 15,
      "ef": 90,
      "max_hits": 15,
      "radius": 10.0
    }
  }
]