use serde::{Deserialize, Serialize};
use std::{sync::Arc, time::Duration};
use tokio::sync::mpsc::{self, error::TrySendError};
use uuid::Uuid;

use crate::chat_history::MessageUpdate;

use super::*;

use tokio::sync::Semaphore;

// Global rate limiter (10 concurrent requests max)
static LLM_RATE_LIMITER: Lazy<Arc<Semaphore>> = Lazy::new(|| 
    // TODO: Make configurable
    Arc::new(Semaphore::new(10))
);

// With burst protection
static LLM_BURST_LIMITER: Lazy<RateLimiter> = Lazy::new(|| {
    let quota = governor::Quota::per_second(5).allow_burst(3);
    governor::RateLimiter::direct(quota)
});

async fn llm_manager(mut rx: broadcast::Receiver<AppEvent>) {
    while let Ok(event) = rx.recv().await {
        if let AppEvent::Llm(llm::Event::Response {
            request_id,
            content,
            ..
        }) = event
        {
            println!("Received response for {request_id}: {content}");
        }
    }
}

async fn process_llm_request(
    parent_id: Uuid,
    prompt: String,
    parameters: LLMParameters,
    state: Arc<AppState>,
    event_bus: Arc<EventBus>
) {
    // Rate-limited API call
    let _permit = LLM_RATE_LIMITER.acquire().await; 
    let response = call_llm_api(&prompt, parameters).await;
    
    // Update state
    let mut history = state.chat_history.write().await;
    history.add_response(parent_id, &response);
    
    // Emit event
    event_bus.send(AppEvent::Llm(
        llm::Event::Response {
            parent_id,
            content: response,
            metadata: /*...*/
        }
    ));
}

// Backpressure-aware command sender
struct CommandSender {
    inner: mpsc::Sender<StateCommand>,
    event_bus: Arc<EventBus>,
}

impl CommandSender {
    async fn send(&self, cmd: StateCommand) {
        match self.inner.try_send(cmd) {
            Ok(_) => {}
            Err(TrySendError::Full(cmd)) => {
                self.event_bus
                    .send(AppEvent::System(SystemEvent::CommandDropped(
                        cmd.discriminant(),
                    )));
                // Optional retry logic
                tokio::time::sleep(Duration::from_millis(10)).await;
                if let Err(e) = self.inner.send(cmd).await {
                    log::error!("Permanent send failure: {}", e);
                    // possibly more logging here.
                }
            }
            Err(TrySendError::Closed(_)) => {
                // TODO: What should go here?
                // check docs on ratatui? tokio?
                // Shutting down
            }
        }
    }
}

// --- Supporting Types ---

/// Defines the author of a message.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum MessageRole {
    /// A message from the end-user.
    User,
    /// A message generated by the language model.
    Assistant,
    /// A system-level message providing context or instructions (often hidden).
    System,
    /// A message generated by a tool or agent.
    Tool,
}

/// Specifies which chat history a command should operate on.
/// Useful for applications with multiple contexts (e.g., main chat, scratchpad).
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub enum ChatHistoryTarget {
    /// The primary, active chat history.
    #[default]
    Main,
    /// A secondary history for notes or drafts.
    Scratchpad,
}

// Usage in subsystems
async fn llm_handler(event: llm::Event, cmd_sender: &CommandSender, state: &AppState) {
    match event {
        Event::Response {
            content: c,
            parent_id: pid,
            request_id,
            model,
            usage,
        } => {
            cmd_sender
                .send(StateCommand::AddMessage {
                    parent_id: pid,
                    content: c,
                    role: MessageRole::Assistant,
                    target: ChatHistoryTarget::Main,
                })
                .await;
        }
        _ => {}
    }
}

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct Parameters {
    pub temperature: f32,
    pub max_tokens: usize,
    pub top_p: f32,
    // ... other LLM parameters
}

#[derive(Clone, Debug)]
pub enum Event {
    /// Request to generate content from an LLM
    Request {
        request_id: Uuid,                // Unique tracking ID
        parent_id: Uuid,                 // Message this responds to
        prompt: String,                  // Input to LLM
        parameters: Parameters,          // Generation settings
        callback: Option<Sender<Event>>, // Optional direct response channel
    },

    /// Successful LLM response
    Response {
        request_id: Uuid,    // Matches Request ID
        parent_id: Uuid,
        content: String,     // Generated content
        model: String,       // e.g., "gpt-4-turbo"
        metadata: LLMMetadata,
        usage: UsageMetrics, // Tokens/timing
    },

    /// Partial response (streaming)
    PartialResponse {
        request_id: Uuid,
        delta: String, // Text chunk
    },

    /// Error during processing
    Error {
        request_id: Uuid,
        error: LlmError, // Structured error type
    },

    /// Status update
    Status {
        active_requests: usize, // Current workload
        queue_depth: usize,     // Pending requests
    },

    /// Configuration change
    ModelChanged {
        new_model: String, // e.g., "claude-3-opus"
    },
}

#[derive(Serialize, Deserialize, Clone, Copy, Debug)]
pub struct UsageMetrics {
    pub prompt_tokens: u32,
    pub completion_tokens: u32,
    pub total_tokens: u32,
    pub latency_ms: u64,
}

impl Event {
    pub fn parent_id(&self) -> Uuid {
        match self {
            Event::Request { parent_id, .. } => *parent_id,
            Event::Response { parent_id, .. } => *parent_id,
            Event::PartialResponse { request_id, delta } => todo!(),
            Event::Error { request_id, error } => todo!(),
            Event::Status { active_requests, queue_depth } => todo!(),
            Event::ModelChanged { new_model } => todo!(),
        }
    }
}

/// Parameters for controlling LLM generation behavior
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct LLMParameters {
    /// LLM model identifier (e.g., "gpt-4-turbo", "claude-3-opus")
    pub model: String,

    /// Sampling temperature (0.0 = deterministic, 1.0 = creative)
    #[serde(default = "default_temperature")]
    pub temperature: f32,

    /// Top-p nucleus sampling threshold (0.0-1.0)
    #[serde(default = "default_top_p")]
    pub top_p: f32,

    /// Maximum tokens to generate (None = model maximum)
    pub max_tokens: Option<u32>,

    /// Presence penalty (-2.0 to 2.0)
    #[serde(default)]
    pub presence_penalty: f32,

    /// Frequency penalty (-2.0 to 2.0)
    #[serde(default)]
    pub frequency_penalty: f32,

    /// Stop sequences to halt generation
    #[serde(default)]
    pub stop_sequences: Vec<String>,

    /// Enable parallel function calling
    #[serde(default = "default_true")]
    pub parallel_tool_calls: bool,

    /// JSON mode enforcement
    #[serde(default)]
    pub response_format: ResponseFormat,

    /// Safety/system controls
    #[serde(default)]
    pub safety_settings: SafetySettings,
}

/// Metadata about LLM execution
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct LLMMetadata {
    /// Actual model used (may differ from request)
    pub model: String,

    /// Token usage metrics
    pub usage: TokenUsage,

    /// Generation completion reason
    pub finish_reason: FinishReason,

    /// Time spent in LLM processing
    pub processing_time: Duration,

    /// Content safety scores
    #[serde(skip_serializing_if = "Option::is_none")]
    pub safety_scores: Option<SafetyScores>,

    /// Cost calculation in USD
    pub cost: f64,

    /// Performance metrics
    pub performance: PerformanceMetrics,
}

// --- Supporting Types ---

/// Response format specification
#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub enum ResponseFormat {
    #[default]
    Text,
    JsonObject,
}

/// Safety control settings
#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct SafetySettings {
    pub hate: u8, // 0-8 (0=disable, 4=moderate, 7=strict)
    pub harassment: u8,
    pub self_harm: u8,
    #[serde(rename = "sexual")]
    pub sexual_content: u8,
}

/// Token usage statistics
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TokenUsage {
    pub prompt_tokens: u32,
    pub completion_tokens: u32,
    pub total_tokens: u32,
}

/// Generation completion reasons
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum FinishReason {
    Stop,          // Natural stop sequence
    Length,        // Max tokens reached
    ContentFilter, // Blocked by safety system
    ToolCalls,     // Stopped for tool execution
    Timeout,       // Processing time exceeded
    Error(String), // Error description
}

/// Content safety assessment
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SafetyScores {
    pub hate: f32, // 0-1 probability score
    pub harassment: f32,
    pub self_harm: f32,
    pub sexual_content: f32,
}

/// Performance metrics
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PerformanceMetrics {
    pub tokens_per_second: f32,
    pub time_to_first_token: Duration,
    pub queue_time: Duration,
}

// --- Default Implementations ---
impl Default for LLMParameters {
    fn default() -> Self {
        Self {
            model: "gpt-4-turbo".to_string(),
            temperature: default_temperature(),
            top_p: default_top_p(),
            max_tokens: None,
            presence_penalty: 0.0,
            frequency_penalty: 0.0,
            stop_sequences: vec!["\n".to_string()],
            parallel_tool_calls: true,
            response_format: Default::default(),
            safety_settings: Default::default(),
        }
    }
}

fn default_temperature() -> f32 {
    0.7
}
fn default_top_p() -> f32 {
    0.9
}
fn default_true() -> bool {
    true
}
