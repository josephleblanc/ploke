
==== Metadata ====
Timestamp: 2025-08-16T18:36:53-07:00
Git HEAD: 269167091d66
Branch: experimental/refactor_run_loop

==== Workspace structure (top-level crates, depth=2) ====
crates
├── common
│   ├── Cargo.toml
│   └── src
├── ingest
│   ├── ploke-embed
│   ├── ploke-transform
│   └── syn_parser
├── logs
│   └── ploke.log.2025-08-01
├── ploke-core
│   ├── Cargo.toml
│   └── src
├── ploke-db
│   ├── AI_NOTES.md
│   ├── COZO_HNSW.md
│   ├── Cargo.toml
│   ├── README.md
│   ├── README.md.bak
│   ├── src
│   ├── test_coverage.md
│   └── tests
├── ploke-error
│   ├── Cargo.toml
│   └── src
├── ploke-io
│   ├── AI_NOTES.md
│   ├── Cargo.toml
│   ├── README.md
│   ├── full_plan.md
│   ├── progress.md
│   ├── src
│   ├── test_coverage.md
│   └── todo_temp.md
├── ploke-rag
│   ├── Cargo.toml
│   ├── README.md
│   ├── docs
│   ├── src
│   └── tests
├── ploke-tui
│   ├── Cargo.toml
│   ├── README-25-08-15.md.bak
│   ├── README.md
│   ├── benches
│   ├── data
│   ├── docs
│   ├── logs
│   ├── src
│   └── tests
├── ploke-ty-mcp
│   ├── Cargo.toml
│   └── src
└── test-utils
    ├── Cargo.toml
    └── src

32 directories, 24 files

==== DB relations referenced in queries (cozo *relation { ... }) ====
_new
_test
bm25_doc_meta
const
crate_context
cur_is_id
embedding_nodes
file_mod
function
inner
module
pat
self
static
struct
syntax_edge
test_table

==== Transform schema creation calls (where relations are defined/inserted) ====
crates/ingest/ploke-transform/src/schema/types.rs:8:    NamedTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:9:    ReferenceTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:10:    SliceTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:11:    ArrayTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:12:    TupleTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:13:    FunctionTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:14:    NeverTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:15:    InferredTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:16:    RawPointerTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:17:    TraitObjectTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:18:    ImplTraitTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:19:    ParenTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:20:    MacroTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/types.rs:21:    UnknownTypeSchema::SCHEMA.create_and_insert(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:68:    ParamNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:69:    AttributeNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:70:    VariantNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:71:    FieldNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:74:    ConstNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:75:    EnumNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:76:    FunctionNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:77:    ImplNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:78:    ImportNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:79:    MacroNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:80:    ModuleNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:81:    StaticNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:82:    StructNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:83:    TraitNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:84:    TypeAliasNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:85:    UnionNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:87:    FileModuleNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:92:    MethodNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:98:    SyntacticRelationSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:101:    CrateContextSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:104:    Bm25MetaSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:243:            pub(crate) fn create_and_insert_schema(db: &Db<MemStorage>) -> Result<(), TransformError> {
crates/ingest/ploke-transform/src/schema/mod.rs:261:    GenericTypeNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:262:    GenericConstNodeSchema::create_and_insert_schema(db)?;
crates/ingest/ploke-transform/src/schema/mod.rs:263:    GenericLifetimeNodeSchema::create_and_insert_schema(db)?;

==== ploke-db: Database public API (signatures) ====
21:pub struct Database {
40:pub fn to_uuid(val: &DataValue) -> Result<uuid::Uuid, DbError> {
49:pub fn to_string(val: &DataValue) -> Result<String, DbError> {
58:pub fn to_usize(val: &DataValue) -> Result<usize, DbError> {
73:pub struct TypedEmbedData {
87:pub struct FileInfo {
104: pub fn new(db: Db<MemStorage>) -> Self {
107: pub fn new_init() -> Result<Self, PlokeError> {
113: pub fn init_with_schema() -> Result<Self, PlokeError> {
126: pub fn get_crate_files(&self, crate_name: &str) -> Result<Vec<FileData>, PlokeError> {
141: pub fn retract_embedded_files(
393: pub fn raw_query(&self, script: &str) -> Result<QueryResult, DbError> {
405: pub fn raw_query_mut(&self, script: &str) -> Result<QueryResult, DbError> {
438: pub fn iter_relations(&self) -> Result<impl IntoIterator<Item = String>, PlokeError> {
447: pub fn relations_vec(&self) -> Result<Vec<String>, PlokeError> {
451: pub fn get_crate_name_id(&self, crate_name: &str) -> Result<String, DbError> {
474: pub fn get_path_info(&self, path: &str) -> Result<QueryResult, PlokeError> {
488: pub fn get_mod_info(&self, mod_id: Uuid) -> Result<QueryResult, PlokeError> {
659: pub fn get_unembedded_node_data(
677: pub fn get_embedded_node_data(
696: pub fn get_file_data(&self) -> Result<Vec<FileData>, PlokeError> {
712: pub fn count_unembedded_files(&self) -> Result<usize, DbError> {
728: pub fn get_common_nodes(&self) -> Result<QueryResult, PlokeError> {
760: pub fn get_nodes_ordered(
817: pub fn get_unembed_rel(
875: pub fn get_embed_rel(
934: pub fn get_rel_with_cursor(
1010: pub fn get_nodes_by_file_with_cursor(
1103: pub fn count_unembedded_nonfiles(&self) -> Result<usize, DbError> {
1112: pub fn count_pending_embeddings(&self) -> Result<usize, DbError> {
1137: pub fn into_usize(named_rows: NamedRows) -> Result<usize, DbError> {
1148: pub fn get_pending_test(&self) -> Result<NamedRows, DbError> {
1174: pub fn upsert_bm25_doc_meta_batch(

==== ploke-db: BM25 indexer surface ====
crates/ploke-db/src/bm25_index/mod.rs:421:pub struct Bm25Indexer {
crates/ploke-db/src/bm25_index/mod.rs:429:impl Bm25Indexer {
crates/ploke-db/src/bm25_index/mod.rs:431:    pub fn new(avgdl: f32) -> Self {
crates/ploke-db/src/bm25_index/mod.rs:454:    pub fn new_from_corpus(corpus: Vec<(Uuid, String)>) -> Self {
crates/ploke-db/src/bm25_index/mod.rs:687:    pub fn is_empty(&self) -> bool {
crates/ploke-db/src/bm25_index/mod.rs:759:        pub fn new() -> Self {

==== Core IDs and hashing (ploke-core) ====
137:    pub struct ResolvedIds {
298:    pub enum TypeId {
485:    pub struct TrackingHash(pub Uuid);
524:    pub trait ResolvedId: Sized + IdTrait + Copy {
559:    pub struct IdInfo<'a> {
609:    pub enum CanonId {
703:    pub enum PubPathId {
859:pub enum ItemKind {
883:pub enum TypeKind {

==== Common paths/helpers (workspace_root, fixtures) ====
pub fn workspace_root() -> PathBuf {
    Path::new(env!("CARGO_MANIFEST_DIR"))
        .parent()
        .expect("Error parsing workspace directory from crate `common`") // crates/
        .parent() // workspace root
        .expect("Failed to get workspace root")
        .to_path_buf()
}
pub fn fixtures_crates_dir() -> PathBuf {
    workspace_root().join("tests/fixture_crates")
}

==== Parser graph surfaces (types/traits central to code entities) ====
crates/ingest/syn_parser/src/parser/graph/mod.rs:36:pub trait GraphAccess {
crates/ingest/syn_parser/src/parser/graph/mod.rs:965:pub trait GraphNode {
crates/ingest/syn_parser/src/parser/graph/code_graph.rs:20:pub struct CodeGraph {

==== Parser node IDs and module nodes (AnyNodeId, ModuleNode) ====
crates/ingest/syn_parser/src/parser/nodes/module.rs:29:pub struct ModuleNode {
crates/ingest/syn_parser/src/parser/nodes/ids/internal.rs:948:pub enum AnyNodeId {

==== TUI Actions/Keymap and Events ====
crates/ploke-tui/src/app_state/events.rs:4:pub struct MessageUpdatedEvent(pub Uuid);
crates/ploke-tui/src/app/types.rs:19:pub enum Mode {
crates/ploke-tui/src/app/types.rs:50:pub trait RenderMsg {
crates/ploke-tui/src/app/input/keymap.rs:21:pub enum Action {
crates/ploke-tui/src/app/input/keymap.rs:61:pub fn to_action(mode: Mode, key: KeyEvent, style: CommandStyle) -> Option<Action> {

==== TUI Event bus send surface ====
2:    pub fn new(b: EventBusCaps) -> Self {
12:    pub fn send(&self, event: AppEvent) {
22:    pub fn send_error(&self, message: String, severity: ErrorSeverity) {

==== LLM integration (TUI side) ====
crates/ploke-tui/src/llm/mod.rs:90:    cmd_tx: mpsc::Sender<StateCommand>,
crates/ploke-tui/src/llm/mod.rs:181:    cmd_tx: mpsc::Sender<StateCommand>,
crates/ploke-tui/src/llm/mod.rs:202:    let create_cmd = StateCommand::CreateAssistantMessage {
crates/ploke-tui/src/llm/mod.rs:207:    if cmd_tx.send(create_cmd).await.is_err() {
crates/ploke-tui/src/llm/mod.rs:208:        log::error!("Failed to send CreateAssistantMessage command: channel closed.");
crates/ploke-tui/src/llm/mod.rs:223:        .map(|content| StateCommand::UpdateMessage {
crates/ploke-tui/src/llm/mod.rs:233:            StateCommand::UpdateMessage {
crates/ploke-tui/src/llm/mod.rs:246:    if cmd_tx.send(update_cmd).await.is_err() {
crates/ploke-tui/src/llm/mod.rs:247:        log::error!("Failed to send final UpdateMessage: channel closed.");
crates/ploke-tui/src/llm/mod.rs:340:        .send()
crates/ploke-tui/src/llm/mod.rs:422:// Backpressure-aware command sender
crates/ploke-tui/src/llm/mod.rs:423:struct CommandSender {
crates/ploke-tui/src/llm/mod.rs:424:    inner: mpsc::Sender<StateCommand>,
crates/ploke-tui/src/llm/mod.rs:428:impl CommandSender {
crates/ploke-tui/src/llm/mod.rs:429:    async fn send(&self, cmd: StateCommand) {
crates/ploke-tui/src/llm/mod.rs:430:        match self.inner.try_send(cmd) {
crates/ploke-tui/src/llm/mod.rs:434:                    .send(AppEvent::System(SystemEvent::CommandDropped(
crates/ploke-tui/src/llm/mod.rs:439:                if let Err(e) = self.inner.send(cmd).await {
crates/ploke-tui/src/llm/mod.rs:440:                    log::error!("Permanent send failure: {}", e);

==== Embedding services/providers (ingest/ploke-embed) ====
1:3:pub trait EmbeddingService {
2:4:    fn compute_embedding(&self, snippet: &str) -> BoxFuture<'_, Result<EmbeddingVector, ploke_error::Error> >;
3:6:    fn dimensions(&self) -> usize;
1:crates/ingest/ploke-embed/src/providers/hugging_face.rs:14:pub struct HuggingFaceBackend {
2:crates/ingest/ploke-embed/src/providers/hugging_face.rs:16:    pub model: String,
3:crates/ingest/ploke-embed/src/providers/hugging_face.rs:21:    pub fn new(config: &HuggingFaceConfig) -> Self {
4:crates/ingest/ploke-embed/src/providers/hugging_face.rs:29:    pub async fn compute_batch(
5:crates/ingest/ploke-embed/src/providers/openai.rs:5:pub struct OpenAIBackend {
6:crates/ingest/ploke-embed/src/providers/openai.rs:7:    pub model: String,
7:crates/ingest/ploke-embed/src/providers/openai.rs:12:    pub fn new(config: &OpenAIConfig) -> Self {
8:crates/ingest/ploke-embed/src/providers/openai.rs:20:    pub async fn compute_batch(
9:crates/ingest/ploke-embed/src/providers/mod.rs:1:pub mod hugging_face;
10:crates/ingest/ploke-embed/src/providers/mod.rs:2:pub mod openai;

==== Indexer/embedding DB API touchpoints ====
crates/ploke-db/src/database.rs:541:    pub async fn update_embeddings_batch(
crates/ploke-db/src/database.rs:668:            let nodes_of_type = self.get_unembed_rel(t, limit.saturating_sub(count), cursor)?;
crates/ploke-db/src/database.rs:686:            let nodes_of_type = self.get_embed_rel(t, limit.saturating_sub(count), cursor)?;
crates/ploke-db/src/database.rs:817:    pub fn get_unembed_rel(
crates/ploke-db/src/database.rs:875:    pub fn get_embed_rel(
crates/ploke-db/src/database.rs:1104:        let nodes = self.count_pending_embeddings()?;
crates/ploke-db/src/database.rs:1112:    pub fn count_pending_embeddings(&self) -> Result<usize, DbError> {
crates/ploke-db/src/database.rs:1174:    pub fn upsert_bm25_doc_meta_batch(
crates/ploke-db/src/database.rs:1236:    async fn update_embeddings_batch_empty() -> Result<(), DbError> {
crates/ploke-db/src/database.rs:1238:        db.update_embeddings_batch(vec![]).await?;
crates/ploke-db/src/database.rs:1247:        let count1 = db.count_pending_embeddings()?;
crates/ploke-db/src/database.rs:1284:        let count = db.count_pending_embeddings()?;
crates/ploke-db/src/database.rs:1295:        let count1 = db.count_pending_embeddings()?;
crates/ploke-db/src/database.rs:1307:        let count1 = db.count_pending_embeddings()?;
crates/ploke-db/src/database.rs:1335:        let all_pending = db.count_pending_embeddings()?;
crates/ploke-db/src/database.rs:1366:    async fn update_embeddings_batch_single() -> Result<(), DbError> {
crates/ploke-db/src/database.rs:1382:        db.update_embeddings_batch(vec![(id, embedding.clone())])
crates/ploke-db/src/database.rs:1427:    async fn test_update_embeddings_batch() -> Result<(), PlokeError> {
crates/ploke-db/src/database.rs:1453:        db.update_embeddings_batch(updates).await?;
crates/ploke-db/src/database.rs:1469:    async fn test_upsert_bm25_doc_meta_batch() -> Result<(), DbError> {
crates/ploke-db/src/database.rs:1482:        db.upsert_bm25_doc_meta_batch(docs.into_iter()).unwrap();
crates/ploke-db/src/bm25_index/mod.rs:642:        cozo.upsert_bm25_doc_meta_batch(new_iter)?;

==== Tests: count and notable test modules ====
Total #[test] count:
250
crates/ingest/syn_parser/docs/error_handling/log_flags.md
crates/ingest/syn_parser/docs/plans/cfg_processing/implementation_plan.md
crates/ingest/syn_parser/docs/plans/cfg_processing/ADR-001-CFG-Processing.md
crates/ingest/syn_parser/docs/plans/cfg_processing/ADR-002-Minimal-CFG-Hashing.md
crates/ingest/syn_parser/tests/TESTING_STRATEGY.md
crates/ingest/syn_parser/tests/full/basic.rs
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/functions.rs
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/traits.rs
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/imports.rs
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/modules.rs
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/type_alias.rs
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/enums.rs
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/consts.rs
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/basic.rs
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/type_conflation.rs
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/mod.rs
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/determinism.rs
crates/ingest/syn_parser/tests/mod.rs
crates/ingest/syn_parser/tests/common/resolution.rs
crates/ingest/syn_parser/tests/common/mod.rs
crates/ingest/syn_parser/tests/common/uuid_ids_utils.rs
crates/ingest/syn_parser/tests/uuid_phase3_resolution/exports.rs
crates/ingest/syn_parser/tests/uuid_phase3_resolution/shortest_path.rs
crates/ingest/syn_parser/tests/uuid_phase3_resolution/path_attribute.rs
crates/ingest/syn_parser/tests/uuid_phase3_resolution/TESTING_STRATEGY.md
crates/ingest/syn_parser/tests/uuid_phase3_resolution/canon_resolver.rs
crates/ingest/syn_parser/tests/uuid_phase3_resolution/edge_cases.rs
crates/ingest/syn_parser/tests/uuid_phase3_resolution/mod.rs
crates/ingest/syn_parser/tests/uuid_phase3_resolution/mod_tree_construction.rs
crates/ingest/syn_parser/tmp/README_next.md
crates/ingest/syn_parser/src/parser/visitor/cfg_evaluator.rs
crates/ingest/syn_parser/src/parser/visitor/mod.rs
crates/ingest/syn_parser/src/parser/visitor/state.rs
crates/ingest/syn_parser/src/parser/visitor/code_visitor.rs
crates/ingest/syn_parser/src/parser/nodes/module.rs
crates/ingest/syn_parser/src/parser/nodes/ids/internal.rs
crates/ingest/syn_parser/src/parser/nodes/mod.rs
crates/ingest/syn_parser/src/parser/graph/parsed_graph.rs
crates/ingest/syn_parser/src/parser/relations.rs
crates/ingest/syn_parser/src/parser/visibility.rs
crates/ingest/syn_parser/src/resolve/error.rs
crates/ingest/syn_parser/src/resolve/module_tree.rs
crates/ingest/syn_parser/src/resolve/logging.rs
crates/ingest/syn_parser/src/resolve/path_resolver.rs
crates/ingest/syn_parser/src/resolve/traversal.rs
crates/ingest/syn_parser/src/resolve/mod.rs
crates/ingest/syn_parser/src/resolve/id_resolver.rs
crates/ingest/syn_parser/src/resolve/relation_indexer.rs
crates/ingest/syn_parser/src/error.rs
crates/ingest/syn_parser/src/discovery.rs
crates/ingest/syn_parser/Cargo.toml
crates/ingest/syn_parser/src/utils/logging.rs
crates/ploke-io/src/lib.rs
crates/ingest/syn_parser/src/utils/mod.rs
crates/ingest/ploke-embed/tests/test_vector_functionality.rs
crates/ploke-io/AI_NOTES.md
crates/ingest/syn_parser/README.md
crates/ingest/ploke-embed/tests/test_helpers.rs
crates/ploke-io/todo_temp.md
crates/ploke-io/README.md
crates/ingest/ploke-embed/README.md
crates/ingest/ploke-embed/AI_NOTES.md
crates/ingest/ploke-embed/src/lib.rs
crates/ingest/ploke-transform/src/schema/edges.rs
crates/ingest/ploke-transform/src/schema/types.rs
crates/ingest/ploke-embed/src/indexer/mod.rs
crates/ingest/ploke-transform/src/schema/mod.rs
crates/ingest/ploke-embed/src/indexer/unit_tests.rs
crates/ingest/ploke-transform/src/schema/secondary_nodes.rs
crates/ingest/ploke-embed/src/error.rs
crates/ploke-core/src/lib.rs
crates/ingest/ploke-transform/src/tests.rs
crates/ploke-error/src/fatal.rs
crates/ingest/ploke-embed/src/partial/index.rs
crates/ploke-tui/docs/indexer_task.md
crates/ingest/ploke-transform/src/macro_traits.rs
crates/ingest/ploke-embed/src/local/mod.rs
crates/ingest/ploke-embed/src/partial/mod.rs
crates/ingest/ploke-transform/AI_NOTES.md
crates/ploke-tui/docs/scrolling_plan.md
crates/ingest/ploke-transform/README.md
crates/ingest/ploke-transform/src/transform/consts.rs
crates/ploke-db/COZO_HNSW.md
crates/test-utils/src/lib.rs
crates/ingest/ploke-transform/src/transform/enums.rs
crates/ploke-db/README.md
crates/ploke-tui/docs/RAG_INTEGRATION_PLAN.md
crates/ploke-rag/README.md
crates/ploke-db/tests/common/test_helpers.rs
crates/ingest/ploke-transform/src/transform/functions.rs
crates/ploke-ty-mcp/src/context7_client.rs
crates/ploke-tui/docs/TO_FIX.md
crates/ploke-db/test_coverage.md
crates/ingest/ploke-transform/src/transform/traits.rs
crates/ploke-tui/docs/refactors.md
crates/ingest/ploke-transform/src/transform/statics.rs
crates/ingest/ploke-transform/src/transform/module.rs
crates/ingest/ploke-transform/src/transform/impls.rs
crates/ingest/ploke-transform/src/transform/crate_context.rs
crates/ploke-rag/tests/integration_tests.rs
crates/ploke-rag/docs/TUI_INTEGRATION_MIN.md
crates/ingest/ploke-transform/src/transform/secondary_nodes.rs
crates/ingest/ploke-transform/src/transform/edges.rs
crates/ingest/ploke-transform/src/transform/macros.rs
crates/ingest/ploke-transform/src/transform/type_node.rs
crates/ingest/ploke-transform/src/transform/structs.rs
crates/ploke-rag/docs/bm25_notes.md
crates/ingest/ploke-transform/src/transform/type_alias.rs
crates/ingest/ploke-transform/src/transform/imports.rs
crates/ploke-rag/docs/IMPLEMENTATION_NOTES.md
crates/ploke-rag/docs/point2_context_assembly_review.md
crates/ingest/ploke-transform/src/transform/mod.rs
crates/ingest/ploke-transform/src/transform/unions.rs
crates/ploke-rag/src/lib.rs
crates/ploke-db/tests/unit/test_queries.rs
crates/ploke-rag/docs/plans.md
crates/ploke-rag/src/error.rs
crates/ploke-db/tests/unit/index_test.rs
crates/ploke-db/tests/unit/debug_cozo.rs
crates/ploke-db/AI_NOTES.md
crates/ploke-db/tests/unit/mod.rs
crates/ploke-db/tests/unit/database_init_tests.rs
crates/ploke-rag/src/context/mod.rs
crates/ploke-tui/README.md
crates/ploke-rag/src/core/mod.rs
crates/ploke-rag/src/core/unit_tests.rs
crates/ploke-db/src/database.rs
crates/ploke-db/src/lib.rs
crates/ploke-tui/data/queries.json
crates/ploke-db/src/bm25_index/bm25_service.rs
crates/ploke-tui/data/pre-dev-results.json
crates/ploke-tui/data/pre-dev-queries.json
crates/ploke-db/src/span/locator.rs
crates/ploke-db/src/bm25_index/mod.rs
crates/ploke-db/src/index/hnsw.rs
crates/ploke-tui/src/chat_history.rs
crates/ploke-db/src/result/mod.rs
crates/ploke-tui/src/lib.rs
crates/ploke-tui/src/user_config.rs
crates/ploke-tui/src/app_state/core.rs
crates/ploke-db/src/result/snippet.rs
crates/ploke-tui/src/app_state/tests.rs
crates/ploke-tui/src/app_state/database.rs
crates/ploke-tui/src/app/mod.rs
crates/ploke-tui/src/app_state/dispatcher.rs
crates/ploke-tui/src/app_state/mod.rs
crates/ploke-tui/src/test_utils/mock.rs
crates/ploke-tui/src/app/events.rs
crates/ploke-tui/data/results.json
crates/ploke-tui/src/app/message_item.rs
crates/ploke-tui/src/app_state/handlers/db.rs
crates/ploke-tui/src/app_state/handlers/mod.rs
crates/ploke-tui/src/app_state/handlers/rag.rs
crates/ploke-tui/src/app/refactor.md
crates/ploke-tui/src/app/commands/exec.rs
crates/ploke-tui/src/app_state/handlers/indexing.rs
crates/ploke-tui/src/app/view/components/conversation.rs

==== TODO/FIXME (top 30) ====
crates/ingest/syn_parser/tests/full/parse_self.rs:76:// TODO: Add specific tests to handle known limitation #11 from
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/functions.rs:1237:    // TODO: Add detailed checks for GenericParamNode kinds and bounds once implemented/needed
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/traits.rs:66://! *   **Generic Parameter Details (for trait generics):** The old tests had TODOs for detailed checks, so this is not a direct regression from asserted behavior but remains an area not covered by the new macro's count-based check.
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/traits.rs:938:    // TODO: Add detailed checks for generic param kinds, bounds, and where clauses
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/traits.rs:1033:    // TODO: Add assertion for trait method if/when implemented here for
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/traits.rs:1112:    // TODO: Check generic param is lifetime 'a'
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/traits.rs:1220:    // TODO: Check all 3 supertrait TypeIds (SimpleTrait, InternalTrait, Debug)
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/traits.rs:1290:    // TODO: Check if TraitNode has an `is_unsafe` flag - currently it doesn't seem to.
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/traits.rs:1292:                                       // TODO: Check if method_node has an `is_unsafe` flag.
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/traits.rs:1382:    // TODO: Check method signatures involving Self
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/impls.rs:395:// TODO: Add combined test for remaining impl blocks
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/modules.rs:286:        // TODO: Add more entries for all modules in the fixture. This is a representative start.
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/modules.rs:437:        // TODO: Add more entries for all modules in the fixture.
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/nodes/type_alias.rs:703:                                              // TODO: Add check for where clause bounds once generics parsing is more detailed
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/ids.rs:324:    // TODO: Add tests for TypeId consistency/difference across crates/files
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/ids.rs:325:    // TODO: Add tests for TrackingHash consistency/difference
crates/ingest/syn_parser/tests/uuid_phase2_partial_graphs/ids.rs:326:    // TODO: Add tests for items in nested modules
crates/ingest/syn_parser/tests/common/mod.rs:185:            // TODO: Decide what to do about handling ExternCrate. We kind of do want everything to
crates/ingest/syn_parser/tests/common/uuid_ids_utils.rs:281:    // ); // TODO: Build this out more.
crates/ingest/syn_parser/tests/uuid_phase3_resolution/exports.rs:481:    // TODO: Add test for conflicting re-exports (requires fixture modification or new fixture)
crates/ingest/syn_parser/tests/uuid_phase3_resolution/shortest_path.rs:51://! # TODO:
crates/ingest/syn_parser/tests/uuid_phase3_resolution/shortest_path.rs:250:// TODO: Add tests for re-exported items once the shortest_public_path implementation handles them.
crates/ingest/syn_parser/tests/uuid_phase3_resolution/shortest_path.rs:318:    // TODO: Enhance shortest_public_path to consider re-exports and potentially return ["crate"] for this item.
crates/ingest/syn_parser/tests/uuid_phase3_resolution/shortest_path.rs:597:// TODO: Add a test variant for when feature_b IS active. Requires feature management in test setup.
crates/ingest/syn_parser/src/parser/visitor/type_processing.rs:100:                                // TODO: Handle Lifetime and Const generic arguments if needed
crates/ingest/syn_parser/src/parser/visitor/type_processing.rs:115:                    // TODO: Handle `PathArguments::None` if necessary
crates/ingest/syn_parser/src/parser/visitor/type_processing.rs:163:            // TODO: Distinguish between "unknown" and "unsupported" types
crates/ingest/syn_parser/src/parser/visitor/cfg_evaluator.rs:31://! TODO: Replace the fallback with an explicit CLI flag or error.
crates/ingest/syn_parser/src/parser/visitor/cfg_evaluator.rs:103:        // TODO: Replace the fallback triple with a more complete target-triple parser.
crates/ingest/syn_parser/src/parser/visitor/mod.rs:120:    // TODO: Add real error handling here.

==== Line counts (quick LOC per major crate) ====
crates/common: 27 crates/common/src/lib.rs
crates/ingest/syn_parser:   34997 total
crates/ingest/ploke-transform:   4507 total
crates/ploke-db:   5124 total
crates/ploke-tui:   8475 total
crates/ploke-core:   983 total
crates/ingest/ploke-embed:   3439 total
